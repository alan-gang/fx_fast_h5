{"version":3,"sources":["views/open-issue-history/index.tsx"],"names":["PullToRefreshAny","data","openIssueHistory","inject","observer","props","id","scrollNode","state","onRefresh","list","onEndReached","isLoading","hasMore","match","params","dataSource","DataSource","rowHasChanged","x","y","refreshing","height","document","documentElement","clientHeight","init","this","setState","historyIssueByDate","lotteryId","size","then","rep","success","cloneWithRows","length","ReactDOM","offsetTop","rd","sid","rid","key","className","issue","code","split","map","i","ref","el","renderFooter","renderRow","style","pullToRefresh","pageSize","initialListSize","renderSeparator","Component","withRouter"],"mappings":"qQAMIA,EAAqB,IAcrBC,EAAiB,GAIfC,EAFLC,YAAO,Q,GACPC,Y,cAKC,WAAaC,GAAe,IAAD,8BACzB,4CAAMA,KAJRC,QAG2B,IAF3BC,gBAE2B,IAD3BC,WAC2B,IA4C3BC,UAAY,WACV,EAAKC,QA7CoB,EA+C3BC,aAAe,YACT,EAAKH,MAAMI,WAAc,EAAKJ,MAAMK,SA9CxC,EAAKP,GAAK,EAAKD,MAAMS,MAAMC,OAAOT,GAClC,EAAKE,MAAQ,CACXQ,WAAY,IAAI,IAASC,WAAW,CAClCC,cAAe,SAACC,EAAQC,GAAT,OAAoBD,IAAMC,KAE3CC,YAAY,EACZT,WAAW,EACXU,OAAQC,SAASC,gBAAgBC,aACjCZ,SAAS,GAEX,EAAKa,OAZoB,E,oEAelB,EACPzB,EAAO,K,6BAEA,IAAD,OACN0B,KAAKC,SAAS,CAAEP,YAAY,EAAMT,WAAW,IAC7CiB,YAAmB,CACjBC,UAAWH,KAAKrB,GAEhByB,KAjCW,MAkCVC,MAAK,SAACC,GACa,IAAhBA,EAAIC,UACNjC,EAAI,sBAAOA,GAAP,YAAgBgC,EAAIhC,OAExB,EAAK2B,SAAS,CACZZ,WAAY,EAAKR,MAAMQ,WAAWmB,cAAclC,GAChDoB,YAAY,EACZT,WAAW,EACXC,QAASoB,EAAIhC,KAAKmC,QA1CX,Y,0CAgDb,IAAI7B,EAAkB8B,cAAqBV,KAAKpB,YAChDoB,KAAKC,SAAS,CACZN,OAAQK,KAAKnB,MAAMc,OAASf,EAAW+B,YAEzCX,KAAKjB,S,gCAWI6B,EAASC,EAAUC,GAC5B,OACE,yBAAKC,IAAKD,EAAKE,UAAU,+BACvB,yBAAKA,UAAU,2BAA4BJ,EAAGK,MAA9C,UACA,yBAAKD,UAAU,mBAEXJ,EAAGM,KAAKC,MAAM,KAAKC,KAAI,SAAC5B,EAAQ6B,GAC9B,OAAO,0BAAMN,IAAKM,EAAGL,UAAU,iFAAkFxB,U,+BAOnH,IAAD,OACP,OACE,yBAAKwB,UAAU,sBACb,uBACEA,UAAU,YACVD,IAAK,IACLO,IAAK,SAAAC,GAAE,OAAI,EAAK3C,WAAa2C,GAC7BlC,WAAYW,KAAKnB,MAAMQ,WACvBmC,aAAc,kBAAO,yBAAKR,UAAU,eACjC,EAAKnC,MAAMI,UAAY,wBAAW,6BAErCwC,UAAWzB,KAAKyB,UAChBC,MAAO,CAAC/B,OAAQK,KAAKnB,MAAMc,QAC3BgC,cAAe,kBAACtD,EAAD,CACbqB,WAAYM,KAAKnB,MAAMa,WACvBZ,UAAWkB,KAAKlB,YAElBE,aAAcgB,KAAKhB,aACnB4C,SA/FO,IAgGPC,gBAAiB,GACjBC,gBAAiB,SAACjB,EAAKC,GAAN,OAAc,yBAAKC,IAAKD,EAAKE,UAAU,0B,GA3FnCe,e,MAkGhBC,sBAAWzD","file":"fastm/static/js/9.a1b2e716.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Route, withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { historyIssueByDate } from 'src/http/APIs'\r\nimport { PullToRefresh, ListView, Button } from 'antd-mobile'\r\nimport * as ReactDOM from 'react-dom'\r\nlet PullToRefreshAny: any = PullToRefresh\r\n\r\ninterface MatchParams {\r\n  id: any\r\n}\r\ninterface Props extends RouteComponentProps<MatchParams> {\r\n  store?: any\r\n}\r\n\r\n// 分页设置\r\nlet page = 1\r\n// get Max 200 count\r\nconst pageSize = 200\r\n// 数据\r\nlet data: object[] = []\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass openIssueHistory extends Component<Props, object> {\r\n  id?: any\r\n  scrollNode?: any\r\n  state: any\r\n  constructor (props: Props) {\r\n    super(props)\r\n    this.id = this.props.match.params.id\r\n    this.state = {\r\n      dataSource: new ListView.DataSource({\r\n        rowHasChanged: (x: any, y: any) => x !== y,\r\n      }),\r\n      refreshing: true,\r\n      isLoading: true,\r\n      height: document.documentElement.clientHeight,\r\n      hasMore: true,\r\n    }\r\n    this.init()\r\n  }\r\n  init () {\r\n    page = 0\r\n    data = []\r\n  }\r\n  list () {\r\n    this.setState({ refreshing: true, isLoading: true })\r\n    historyIssueByDate({\r\n      lotteryId: this.id,\r\n      // page: page,\r\n      size: pageSize,\r\n    }).then((rep: any) => {\r\n      if (rep.success === 1) {\r\n        data = [...data, ...rep.data]\r\n        page++\r\n        this.setState({\r\n          dataSource: this.state.dataSource.cloneWithRows(data),\r\n          refreshing: false,\r\n          isLoading: false,\r\n          hasMore: rep.data.length >= pageSize,\r\n        })\r\n      }\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    let scrollNode: any = ReactDOM.findDOMNode(this.scrollNode)\r\n    this.setState({\r\n      height: this.state.height - scrollNode.offsetTop\r\n    })\r\n    this.list()\r\n  }\r\n  onRefresh = () => {\r\n    this.list()\r\n  }\r\n  onEndReached = () => {\r\n    if (this.state.isLoading && !this.state.hasMore) {\r\n      return\r\n    }\r\n    // this.list()\r\n  }\r\n  renderRow (rd: any, sid: any, rid: any) {\r\n    return (\r\n      <div key={rid} className=\"pdt-25 pdb-25 pdl-20 pdr-20\">\r\n        <div className=\"inlb wp_30 va-t mgt-10 \">{ rd.issue }期</div>\r\n        <div className=\"inlb wp_70 va-t\">\r\n          {\r\n            rd.code.split(',').map((x: any, i: any) => {\r\n              return <span key={i} className=\"inlb win-number rp_50 hlh-45 w-45  bgc-deeporange mgr-10 mgb-10 txt-c c-white\">{ x }</span>\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"open-issue-history\">\r\n        <ListView\r\n          className=\"fs-28 c-3\"\r\n          key={'1'}\r\n          ref={el => this.scrollNode = el}\r\n          dataSource={this.state.dataSource}\r\n          renderFooter={() => (<div className=\"pd-30 txt-c\">\r\n            {this.state.isLoading ? '加载中...' : '加载完毕'}\r\n          </div>)}\r\n          renderRow={this.renderRow}\r\n          style={{height: this.state.height}}\r\n          pullToRefresh={<PullToRefreshAny\r\n            refreshing={this.state.refreshing}\r\n            onRefresh={this.onRefresh}\r\n          />}\r\n          onEndReached={this.onEndReached}\r\n          pageSize={pageSize}\r\n          initialListSize={15}\r\n          renderSeparator={(sid, rid) => <div key={rid} className=\"h-10 bgc-page\"></div>}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(openIssueHistory)\r\n"],"sourceRoot":""}