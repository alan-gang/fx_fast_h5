{"version":3,"sources":["views/open-issue-history/index.tsx"],"names":["PullToRefreshAny","data","openIssueHistory","inject","observer","props","id","scrollNode","state","onRefresh","list","onEndReached","isLoading","hasMore","getNum","x","LOTTERY_TYPES","K3","gameType","renderRow","rd","sid","rid","key","className","issue","code","split","map","i","Fragment","renderOpenNumbers","match","params","getGameTypeByGameId","parseInt","dataSource","DataSource","rowHasChanged","y","refreshing","height","document","documentElement","clientHeight","init","this","setState","historyIssueByDate","lotteryId","size","then","rep","success","cloneWithRows","length","ReactDOM","offsetTop","HC6","num","isHc6","String","padStart","getAnimalByNum","ref","el","renderFooter","style","pullToRefresh","pageSize","initialListSize","renderSeparator","Component","withRouter"],"mappings":"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","file":"m/fastm/static/js/6.81688821.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Route, withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { historyIssueByDate } from 'src/http/APIs'\r\nimport { PullToRefresh, ListView, Button } from 'antd-mobile'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { getGameTypeByGameId } from '../../game/games';\r\nimport { LOTTERY_TYPES } from '../../utils/config';\r\nimport { getAnimalByNum } from '../../game/hc6';\r\n\r\nimport \"./index.styl\";\r\n\r\nlet PullToRefreshAny: any = PullToRefresh\r\n\r\ninterface MatchParams {\r\n  id: any\r\n}\r\ninterface Props extends RouteComponentProps<MatchParams> {\r\n  store?: any\r\n}\r\n\r\n// 分页设置\r\nlet page = 1\r\n// get Max 200 count\r\nconst pageSize = 200\r\n// 数据\r\nlet data: object[] = []\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass openIssueHistory extends Component<Props, object> {\r\n  id?: any\r\n  scrollNode?: any\r\n  state: any\r\n  constructor (props: Props) {\r\n    super(props)\r\n    this.id = this.props.match.params.id\r\n    let gameType = getGameTypeByGameId(parseInt(this.id, 10));\r\n    this.state = {\r\n      dataSource: new ListView.DataSource({\r\n        rowHasChanged: (x: any, y: any) => x !== y,\r\n      }),\r\n      refreshing: true,\r\n      isLoading: true,\r\n      height: document.documentElement.clientHeight,\r\n      hasMore: true,\r\n      gameType\r\n    }\r\n    this.init()\r\n  }\r\n  init () {\r\n    page = 0\r\n    data = []\r\n  }\r\n  list () {\r\n    this.setState({ refreshing: true, isLoading: true })\r\n    historyIssueByDate({\r\n      lotteryId: this.id,\r\n      // page: page,\r\n      size: pageSize,\r\n    }).then((rep: any) => {\r\n      if (rep.success === 1) {\r\n        data = [...data, ...rep.data]\r\n        page++\r\n        this.setState({\r\n          dataSource: this.state.dataSource.cloneWithRows(data),\r\n          refreshing: false,\r\n          isLoading: false,\r\n          hasMore: rep.data.length >= pageSize,\r\n        })\r\n      }\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    let scrollNode: any = ReactDOM.findDOMNode(this.scrollNode)\r\n    this.setState({\r\n      height: this.state.height - scrollNode.offsetTop\r\n    })\r\n    this.list()\r\n  }\r\n  onRefresh = () => {\r\n    this.list()\r\n  }\r\n  onEndReached = () => {\r\n    if (this.state.isLoading && !this.state.hasMore) {\r\n      return\r\n    }\r\n    // this.list()\r\n  }\r\n  getNum = (x: any) => {\r\n    if (LOTTERY_TYPES.K3 === this.state.gameType) {\r\n      return '';\r\n    } else {\r\n      return x;\r\n    }\r\n  }\r\n  isHc6() {\r\n    return this.state.gameType === LOTTERY_TYPES.HC6;\r\n  }\r\n  renderOpenNumbers(num: string, i: number) {\r\n    if (this.isHc6()) {\r\n      if (i === 5) {\r\n        return (<div key={i} className={`icon-plus`}>+</div>)\r\n      }\r\n      return (<div><div key={i} className={`open-num-item n-${String(num).padStart(2, '0')}`}>{String(num).padStart(2, '0')}</div><div className=\"animal\">{getAnimalByNum(parseInt(num, 10))}</div></div>)\r\n    } else {\r\n      return <span key={i} className={`inlb win-number rp_50 hlh-45 w-45  bgc-deeporange mgr-10 mgb-10 txt-c c-white n-${num}`}>{ this.getNum(num) }</span>\r\n    }\r\n  }\r\n  renderRow = (rd: any, sid: any, rid: any) => {\r\n    return (\r\n      <div key={rid} className=\"pdt-25 pdb-25 pdl-20 pdr-20 flex\">\r\n        <div className=\"wp_30 va-m mgt-10 \">{ rd.issue }期</div>\r\n        <div className=\"wp_70 va-m flex\">\r\n          {\r\n            rd.code.split(',').map((x: any, i: any) => (\r\n              <React.Fragment  key={i}>{this.renderOpenNumbers(x, i)}</React.Fragment>\r\n              // return <span key={i} className={`inlb win-number rp_50 hlh-45 w-45  bgc-deeporange mgr-10 mgb-10 txt-c c-white n-${x}`}>{ this.getNum(x) }</span>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={`open-issue-history ${this.state.gameType}`}>\r\n        <ListView\r\n          className=\"fs-28 c-3\"\r\n          key={'1'}\r\n          ref={el => this.scrollNode = el}\r\n          dataSource={this.state.dataSource}\r\n          renderFooter={() => (<div className=\"pd-30 txt-c\">\r\n            {this.state.isLoading ? '加载中...' : '加载完毕'}\r\n          </div>)}\r\n          renderRow={this.renderRow}\r\n          style={{height: this.state.height}}\r\n          pullToRefresh={<PullToRefreshAny\r\n            refreshing={this.state.refreshing}\r\n            onRefresh={this.onRefresh}\r\n          />}\r\n          onEndReached={this.onEndReached}\r\n          pageSize={pageSize}\r\n          initialListSize={15}\r\n          renderSeparator={(sid, rid) => <div key={rid} className=\"h-10 bgc-page\"></div>}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(openIssueHistory)\r\n"],"sourceRoot":""}