{"version":3,"sources":["utils/timer.ts","components/ludan/LudanMenu.tsx","components/ludan/index.tsx","views/lobby/LobbyGameHeader.tsx","views/lobby/LobbyGame.tsx","views/lobby/index.tsx"],"names":["Timer","time","fn","step","timerItval","this","start","window","setInterval","clearInterval","LundanMenu","inject","observer","props","myScrollRef","scrollToSelectedElement","selectedItem","document","querySelector","current","bscroll","x","scrollToElement","changeMenu","menu","updateMenu","React","createRef","nextProps","refresh","className","ref","tabs","length","map","i","key","selectedMenu","name","onClick","title","Component","Ludan","state","setState","updateLudanList","ludanList","getLuDanListByMethod","issueList","slice","gameType","maxRows","maxColumns","getAllTabsByTypeAndName","methodMenuName","defaultMenu","isShowLudanMenu","LudanMenu","LundanTable","isScroll","LobbyGameHeader","timer","remainTime","hours","minutes","seconds","initTimer","timeStr","times","close","Math","floor","t","getNewestIssue","gameId","timeFormat","split","clearTimer","gameName","curIssue","parseInt","bestLudanConfig","LobbyGame","mysocket","init","getCurIssue","getHistoryIssue","gameid","APIs","then","data","success","issue","curTime","saleend","gotoGame","goto","onIntoGame","store","game","getGameLimitLevelByGameId","limitListItem","getLimitListItemById","isShowLimitSetDialog","limitLevelList","kqPrizeLimit","onLimitChoiceCB","level","updateGamesLimitLevel","onCloseLimitChoiceHandler","getGameTypeByGameId","limitItem","bestLudan","bestLudanName","getLunDanFullTitleByName","codeStyle","getMethodENameByLudanName","ludanTab","getLudanTabByTypeAndName","initDataFromProps","getCurIssueFromProps","getBestLudanFromPropsByGameId","bestLudanList","getHistoryIssueFromProps","recentCodeList","Socket","url","common","broadcaseWSUrl","receive","type","content","lottId","openWinCode","setTimeout","getLimitData","open","params","action","user","login","parameter","userId","app","send","JSON","stringify","id","openHistoryItem","unshift","lastIssue","openNumbers","code","initSocket","curServerTime","find","lotteryid","historyIssue","items","item","removeListen","Fragment","pos","notifyVal","notifyType","contCount","unit","updateLimitListItemBestLudan","getBestLudan","lotteryId","updateBestLudan","besetLudan","ludan","renderBestLudanTxt","reverse","Lobby","DEFAULT_GAME_TYPE","checkFrom","gameIds","getGameIds","curGames","join","getIssuesByGameIds","getBatchBestLudanByGameIds","getBatchRecentCodesByGameIds","path","history","push","onMenuChanged","getAllGames","getGamesByType","filterAvailableGames","curGameType","getAvailableGames","availableGames","games","tempGames","forEach","hasAvailableGame","getUrlParams","ids"],"mappings":"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","file":"m/fastm/static/js/4.a3d69d74.chunk.js","sourcesContent":["class Timer {\r\n  private timerItval: number = 0;\r\n  private fn: any;\r\n  /**\r\n   * 定时器\r\n   * @param {*} time  时间\r\n   * @param {*} fn    回调函数\r\n   * @param {*} step\r\n   */\r\n  constructor(time: number, fn: any, step?: number) {\r\n    this.fn = fn;\r\n    this.start(time, fn, step);\r\n  }\r\n  private start(time: number, fn: any, step: number = 1000): void {\r\n    this.timerItval = window.setInterval(() => {\r\n      if (time <= 0) {\r\n        clearInterval(this.timerItval);\r\n        fn(0, true);\r\n        return;\r\n      }\r\n      fn(time, false);\r\n      time--;\r\n    }, step);\r\n  }\r\n  public close(): void {\r\n    clearInterval(this.timerItval);\r\n    // this.fn(0, true);\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Bus from '../../utils/eventBus';\r\nimport MyScroll from '../my-scroll';\r\nimport './ludanMenu.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  tabs: any[];\r\n  selectedMenu?: string;\r\n  selectedSubMenu?: string;\r\n  methodMenuName?: string;\r\n  updateMenu(menuName: any): void;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass LundanMenu extends Component<Props, object> {\r\n  myScrollRef: any;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.myScrollRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToSelectedElement();\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    this.myScrollRef.current.refresh();\r\n    this.scrollToSelectedElement();\r\n  }\r\n  scrollToSelectedElement = () => {\r\n    let selectedItem = document.querySelector('.ludan-menu-view .menu-item.selected');\r\n    if (this.myScrollRef.current.bscroll && selectedItem && this.myScrollRef.current.bscroll) {\r\n      this.myScrollRef.current.bscroll.x += 1;\r\n      this.myScrollRef.current.bscroll.scrollToElement(selectedItem, 150, true);\r\n    }\r\n  }\r\n  changeMenu = (menu: any) => {\r\n    this.props.updateMenu(menu);\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"ludan-menu-view\">\r\n        <MyScroll ref={this.myScrollRef}>\r\n          <nav className=\"menu\">\r\n            {this.props.tabs && this.props.tabs.length > 0 && this.props.tabs.map((menu: any, i: number) => (\r\n              <div key={i} className={`menu-item ${this.props.selectedMenu === menu.name ? 'selected' : ''}`} onClick={() => this.changeMenu(menu)}>{menu.title}</div>\r\n            ))}\r\n          </nav>\r\n        </MyScroll>\r\n      </section>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default LundanMenu;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { getLuDanListByMethod, getTabsByType, getAllTabsByTypeAndName } from '../../utils/ludan';\r\nimport LudanMenu from './LudanMenu';\r\nimport LundanTable from './LundanTable';\r\n\r\nimport './index.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  methodMenuName: string;\r\n  maxColumns: number;\r\n  maxRows: number;\r\n  issueList: any[];\r\n  defaultMenu?: string;\r\n  isShowLudanMenu?: boolean;\r\n  isScroll?: boolean;\r\n}\r\n\r\ninterface State {\r\n  tabs: any[];\r\n  selectedMenu?: string;\r\n  ludanList: any[];\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Ludan extends Component<Props, object> {\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let tabs = getAllTabsByTypeAndName(this.props.gameType, this.props.methodMenuName);\r\n    // ssc -> 整合 -> 万位大小\r\n    let selectedMenu = this.props.defaultMenu || (tabs.length > 0 ? tabs[0].name : '');\r\n    let ludanList = getLuDanListByMethod(this.props.issueList.slice(0), this.props.gameType,  selectedMenu || '', this.props.maxRows, this.props.maxColumns - 1) || []\r\n    this.state = {\r\n      selectedMenu,\r\n      ludanList,\r\n      tabs\r\n    }\r\n  }\r\n  updateMenu = (menu: any) => {\r\n    this.setState({\r\n      selectedMenu: menu.name,\r\n    }, this.updateLudanList);\r\n  }\r\n  updateLudanList = () => {\r\n    this.setState({\r\n      ludanList: getLuDanListByMethod(this.props.issueList.slice(0), this.props.gameType, this.state.selectedMenu || '', this.props.maxRows, this.props.maxColumns) || []\r\n    });\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    let tabs = getAllTabsByTypeAndName(nextProps.gameType, nextProps.methodMenuName);\r\n    let selectedMenu = nextProps.defaultMenu || (tabs.length > 0 ? tabs[0].name : '');\r\n    let ludanList = getLuDanListByMethod(nextProps.issueList.slice(0), nextProps.gameType,  selectedMenu || '', nextProps.maxRows, nextProps.maxColumns) || []\r\n    this.setState({\r\n      selectedMenu,\r\n      ludanList,\r\n      tabs\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"ludan-view\">\r\n        {this.props.isShowLudanMenu !== false && <LudanMenu selectedMenu={this.state.selectedMenu} tabs={this.state.tabs} updateMenu={this.updateMenu} methodMenuName={this.props.methodMenuName} />}\r\n        <LundanTable maxColumns={this.props.maxColumns} maxRows={this.props.maxRows} ludanList={this.state.ludanList} isScroll={this.props.isScroll} />\r\n      </section>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default Ludan;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Timer from '../../utils/timer';\r\nimport { timeFormat } from '../../utils/date';\r\n\r\nimport './lobbyGameHeader.styl'\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  curIssue?: string;\r\n  remainTime: number;\r\n  gameName: string;\r\n  getNewestIssue(gameid: number): void;\r\n}\r\n\r\ninterface State {\r\n  timer: any;\r\n  remainTime: number;\r\n  hours: string;\r\n  minutes: string;\r\n  seconds: string;\r\n}\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass LobbyGameHeader extends Component<Props, object> {\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      timer: null,\r\n      remainTime: this.props.remainTime,\r\n      hours: '00',\r\n      minutes: '00',\r\n      seconds: '00'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.initTimer(this.props.remainTime);\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    this.setState({remainTime: nextProps.remainTime});\r\n    this.initTimer(nextProps.remainTime);\r\n  }\r\n  initTimer(remainTime: number) {\r\n    if (remainTime <= 0) return;\r\n    let timer = this.state.timer;\r\n    let timeStr: string = '';\r\n    let times: string[] = [];\r\n    if (timer && timer.close) {\r\n      timer.close();\r\n    }\r\n    timer = new Timer(Math.floor(remainTime), (t: number): void => {\r\n      if (t <= 0) {\r\n        this.props.getNewestIssue(this.props.gameId);\r\n      }\r\n      timeStr = timeFormat(t * 1000);\r\n      times = timeStr.split(':');\r\n      this.setState({hours: times[0], minutes: times[1], seconds: times[2]});\r\n    });\r\n    this.setState({timer});\r\n  }\r\n  clearTimer(): void {\r\n    if (this.state.timer && this.state.timer.close) {\r\n      this.state.timer.close();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.clearTimer();\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"flex ai-c lobby-game-header-view\">\r\n        <div className=\"flex jc-sb ai-c w100 \">\r\n          <div className=\"txt-r cur-issue-wp\">\r\n            <span className=\"fw-b\">{this.props.gameName}</span><span>{this.props.curIssue}期</span>\r\n          </div>\r\n          <div className={`time-wp ${this.state.hours === '00' && this.state.minutes === '00' && parseInt(this.state.seconds, 10) <= 10 ? 'txt-c-r' : ''}`}>\r\n            {/* <span className=\"hour time-item mg-r-3\">{this.state.hours.split('')[0]}</span>\r\n            <span className=\"hour time-item\">{this.state.hours.split('')[1]}</span>\r\n            <span className=\"colon\">:</span> */}\r\n            <span className=\"minute time-item mg-r-3\">{this.state.minutes.split('')[0]}</span>\r\n            <span className=\"minute time-item\">{this.state.minutes.split('')[1]}</span>\r\n            <span className=\"colon\">:</span>\r\n            <span className=\"second time-item mg-r-3\">{this.state.seconds.split('')[0]}</span>\r\n            <span className=\"second time-item\">{this.state.seconds.split('')[1]}</span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LobbyGameHeader;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport LobbyGameHeader from './LobbyGameHeader';\r\nimport Ludan from 'comp/ludan';\r\n// import { Row, Col, Button } from 'antd-mobile';\r\n// import LimitSetDialog from 'comp/limit-set-dialog';\r\nimport APIs from '../../http/APIs';\r\nimport { getGameTypeByGameId } from '../../game/games';\r\nimport { getLunDanTabByName, getLunDanFullTitleByName, getMethodENameByLudanName, getLudanTabByTypeAndName } from '../../utils/ludan';\r\nimport Socket from '../../socket';\r\n\r\nimport './lobbyGame.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  gameName: string;\r\n  goto(path: string): void;\r\n  issueList: any[];\r\n  bestLudanList: any[];\r\n  recentCodeList: any[];\r\n  curServerTime: number;\r\n}\r\n\r\ninterface State {\r\n  gameType: string;\r\n  curIssue: string;\r\n  curTime: number;\r\n  remainTime: number;\r\n  issueList: any[];\r\n  maxColumns: number;\r\n  maxRows: number;\r\n  isShowLudanMenu: boolean;\r\n  bestLudanConfig: any;\r\n  bestLudanName: string;\r\n  isShowLimitSetDialog: boolean;\r\n  limitLevelList: LimitLevelItem[];\r\n  methodMenuName: string;\r\n  defaultMenu?: string;\r\n  bestLudan: BestLudanItem;\r\n}\r\n\r\nlet bestLudanConfig: any = {\r\n  'ssc': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '总和大小'},\r\n  '11x5': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '总和大小'},\r\n  'pk10': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '冠亚和值大小'},\r\n  'k3': {methodMenuName: 'diansu', defaultMenu: 'zh_dx', title: '总和大小'},\r\n  'hc6':  {methodMenuName: '', defaultMenu: '', title: '总和大小'}\r\n};\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass LobbyGame extends Component<Props, object> {\r\n  state: State;\r\n  mysocket?: Socket;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let gameType = getGameTypeByGameId(props.gameId);\r\n    let limitItem = props.store.game.getLimitListItemById(props.gameId);\r\n    let bestLudan: BestLudanItem = limitItem && limitItem.bestLudan;\r\n    // console.log('bestLudan=', JSON.stringify(limitItem && limitItem.bestLudan));\r\n    // let ludanTab = getLunDanTabByName(gameType, bestLudan && bestLudan.codeStyle);\r\n    let bestLudanName = (getLunDanFullTitleByName(gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[gameType].title) + '路单';\r\n    let methodMenuName = getMethodENameByLudanName(gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[gameType].methodMenuName;\r\n    let ludanTab = getLudanTabByTypeAndName(gameType, methodMenuName, bestLudan && bestLudan.codeStyle);\r\n    let defaultMenu = (ludanTab && ludanTab.name) || bestLudanConfig[gameType].defaultMenu;\r\n    this.state = {\r\n      gameType,\r\n      curIssue: '',\r\n      curTime: 0,\r\n      remainTime: 0,\r\n      issueList: [],\r\n      maxColumns: 19,\r\n      maxRows: 6,\r\n      isShowLudanMenu: false,\r\n      bestLudanConfig,\r\n      bestLudanName: bestLudanName,\r\n      isShowLimitSetDialog: false,\r\n      limitLevelList: [],\r\n      methodMenuName,\r\n      defaultMenu,\r\n      bestLudan\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    // this.init();\r\n    this.initDataFromProps();\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    // console.log('LobbyGame=', nextProps.store.game.getLimitListItemById(nextProps.gameId))\r\n    // console.log('nextProps=', nextProps)\r\n    this.getCurIssueFromProps(this.props.gameId, nextProps.issueList);\r\n    this.getBestLudanFromPropsByGameId(this.props.gameId, nextProps.bestLudanList);\r\n    this.getHistoryIssueFromProps(this.props.gameId, nextProps.recentCodeList);\r\n  }\r\n  init = () => {\r\n    this.getCurIssue(this.props.gameId);\r\n    this.getHistoryIssue(this.props.gameId);\r\n  }\r\n  initDataFromProps() {\r\n    this.getCurIssueFromProps(this.props.gameId);\r\n    this.getBestLudanFromPropsByGameId(this.props.gameId);\r\n    this.getHistoryIssueFromProps(this.props.gameId);\r\n  }\r\n  initSocket() {\r\n    this.mysocket = new Socket({\r\n      url: this.props.store.common.broadcaseWSUrl,\r\n      name: 'lobbyGame' + this.props.gameId,\r\n      receive: (data) => {\r\n        if (data.type === 'openWinCode') {\r\n          if (data.content && data.content.length > 0 && parseInt(data.content[0].lottId, 10) === this.props.gameId) {\r\n            this.openWinCode(parseInt(data.content[0].lottId, 10), data.content[0]);\r\n            setTimeout(() => {\r\n              this.getLimitData(this.props.gameId);\r\n            }, 2000)\r\n          }\r\n        }\r\n      },\r\n      open: () => {\r\n        if (this.mysocket) {\r\n          let params: any = {action: 'noauth'};\r\n          if (this.props.store.user.login) {\r\n            params = {\r\n              parameter: {\r\n                userId: this.props.store.user.userId,\r\n                app: 'web'\r\n              },\r\n              action: 'auth'\r\n            };\r\n          }\r\n          this.mysocket.send(JSON.stringify(params));\r\n        }\r\n      }\r\n    }, true);\r\n  }\r\n  openWinCode(id: number, openHistoryItem: any) {\r\n    if (id === this.props.gameId) {\r\n      let issueList = this.state.issueList;\r\n      issueList.unshift(openHistoryItem);\r\n      this.setState({\r\n        lastIssue: issueList[0].issue,\r\n        openNumbers: issueList[0].code.split(','),\r\n        issueList: issueList\r\n      });\r\n      this.getCurIssue(this.props.gameId);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.initSocket();\r\n  }\r\n  getCurIssue = (gameid: number) => {\r\n    APIs.curIssue({gameid}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.setState({\r\n          curIssue: data.issue,\r\n          curTime: data.current,\r\n          remainTime: Math.floor((data.saleend - data.current) / 1000) || (this.state.remainTime + 0.05)\r\n        })\r\n      } else {\r\n        this.setState({curIssue: ''});\r\n      }\r\n    });\r\n  }\r\n  getCurIssueFromProps(gameid: number, issueList: any[] = [], curServerTime?: number) {\r\n    issueList = issueList.length > 0 ? issueList : this.props.issueList;\r\n    curServerTime = curServerTime || this.props.curServerTime;\r\n    if (issueList && issueList.length > 0) {\r\n      let data = issueList.find((issue) => issue.lotteryid === gameid);\r\n      if (data) {\r\n        this.setState({\r\n          curIssue: data.issue,\r\n          curTime: curServerTime,\r\n          remainTime: Math.floor((data.saleend - curServerTime) / 1000) || (this.state.remainTime + 0.05)\r\n        })\r\n      }\r\n    }\r\n  }\r\n  getHistoryIssue(gameid: number) {\r\n    APIs.historyIssue({gameid}).then((data: any) => {\r\n      if (data.success === 1) {\r\n        if (data.items.length > 0) {\r\n          this.setState({\r\n            lastIssue: data.items[0].issue,\r\n            openNumbers: data.items[0].code.split(','),\r\n            issueList: data.items\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  getHistoryIssueFromProps(gameid: number, recentCodeList: any[] = []) {\r\n    recentCodeList = recentCodeList.length > 0 ? recentCodeList : this.props.recentCodeList;\r\n    if (recentCodeList && recentCodeList.length > 0) {\r\n      let data = recentCodeList.find((item) => item[gameid] && item[gameid].length > 0);\r\n      data = data && data[gameid];\r\n      if (data) {\r\n        this.setState({\r\n          lastIssue: data[0].issue,\r\n          openNumbers: data[0].code.split(','),\r\n          issueList: data\r\n        });\r\n      }\r\n    }\r\n  }\r\n  gotoGame = () => {\r\n    this.props.goto(`/game/${this.props.gameId}`);\r\n  }\r\n  onIntoGame = () => {\r\n    if (this.props.store.game.getGameLimitLevelByGameId(this.props.gameId)) {\r\n      this.gotoGame();\r\n    } else {\r\n      let limitListItem = this.props.store.game.getLimitListItemById(this.props.gameId);\r\n      this.setState({isShowLimitSetDialog: true, limitLevelList: limitListItem ? limitListItem.kqPrizeLimit : []});\r\n    }\r\n  }\r\n  onLimitChoiceCB = (level: number) => {\r\n    this.props.store.game.updateGamesLimitLevel({gameId: this.props.gameId, level});\r\n    this.gotoGame();\r\n  }\r\n  onCloseLimitChoiceHandler = () => {\r\n    this.setState({isShowLimitSetDialog: false});\r\n  }\r\n  componentWillUnmount() {\r\n    this.mysocket && this.mysocket.removeListen();\r\n  }\r\n  renderBestLudanTxt() {\r\n    let bestLudan = this.state.bestLudan;\r\n    if (!bestLudan) return <div></div>\r\n    return <React.Fragment>\r\n      <div>\r\n        <span className=\"mgr-20\">{ bestLudan.pos }<span className=\"c-red\">{ bestLudan.notifyVal }</span>路单</span>\r\n      </div>\r\n      <div>\r\n        <span>{[null, '长龙', '单跳', '单边跳', '一厅两房', '拍拍连'][bestLudan.notifyType] || '连出' }<span className=\"c-red\">{ bestLudan.contCount }</span>{bestLudan.unit}</span>\r\n      </div>\r\n    </React.Fragment>\r\n  }\r\n  updateBestLudan(bestLudan: BestLudanItem) {\r\n    let bestLudanName = (getLunDanFullTitleByName(this.state.gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[this.state.gameType].title) + '路单';\r\n    let methodMenuName = getMethodENameByLudanName(this.state.gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[this.state.gameType].methodMenuName;\r\n    let ludanTab = getLudanTabByTypeAndName(this.state.gameType, methodMenuName, bestLudan && bestLudan.codeStyle);\r\n    let defaultMenu = (ludanTab && ludanTab.name) || bestLudanConfig[this.state.gameType].defaultMenu;\r\n    // console.log('id=', id, 'methodMenuName=', methodMenuName, ' defaultMenu=', defaultMenu)\r\n    this.setState({\r\n      bestLudanName: bestLudanName,\r\n      methodMenuName,\r\n      defaultMenu,\r\n      bestLudan\r\n    });\r\n    this.props.store.game.updateLimitListItemBestLudan(bestLudan);\r\n  }\r\n  getLimitData(id: number) {\r\n    APIs.getBestLudan({lotteryId: id}).then((data: any) => {\r\n      if (data.success === 1) {\r\n        if (data.bestLudan) {\r\n          this.updateBestLudan(data.bestLudan);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  getBestLudanFromPropsByGameId(id: number, bestLudanList: any[] = []) {\r\n    bestLudanList = bestLudanList.length > 0 ? bestLudanList : this.props.bestLudanList;\r\n    if (bestLudanList && bestLudanList.length > 0) {\r\n      let besetLudan = this.props.bestLudanList.find((ludan) => ludan.lotteryId === id)\r\n      if (besetLudan) {\r\n        this.updateBestLudan(besetLudan);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"lobby-game-view crs-p\" onClick={this.gotoGame}>\r\n        <LobbyGameHeader gameType={this.props.gameType} gameId={this.props.gameId} curIssue={this.state.curIssue} remainTime={this.state.remainTime} gameName={this.props.gameName} getNewestIssue={this.getCurIssue} />\r\n        <div className=\"flex jc-sb best-dudan-name\">\r\n          {/* <div>{this.state.bestLudanName}</div> */}\r\n          {this.renderBestLudanTxt()}\r\n        </div>\r\n        <div className=\"ludan-wp\">\r\n          <Ludan \r\n            isShowLudanMenu={this.state.isShowLudanMenu} \r\n            gameId={this.props.gameId} \r\n            gameType={this.state.gameType} \r\n            maxColumns={this.state.maxColumns} \r\n            maxRows={this.state.maxRows} \r\n            issueList={this.state.issueList.slice(0).reverse()} \r\n            methodMenuName={this.state.methodMenuName} \r\n            defaultMenu={this.state.defaultMenu} \r\n            isScroll={false}\r\n          />\r\n        </div>\r\n        {/* <LimitSetDialog isShow={this.state.isShowLimitSetDialog} gameId={this.props.gameId} limitLevelList={this.state.limitLevelList} onLimitChoiceCB={this.onLimitChoiceCB} onCloseHandler={this.onCloseLimitChoiceHandler} /> */}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LobbyGame;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n// import LobbyMenu from './LobbyMenu';\r\nimport LobbyGame from './LobbyGame';\r\nimport { getGamesByType, getAllGames } from '../../game/games';\r\nimport { Game } from '../../typings/games';\r\nimport { getUrlParams } from '../../utils/common';\r\nimport APIs from '../../http/APIs';\r\n\r\nimport './index.styl';\r\n\r\ninterface IProps {\r\n  store?: any;\r\n  gameType?: string;\r\n}\r\n\r\ntype Props = IProps & RouteComponentProps;\r\n\r\ninterface State {\r\n  curGameType: string;\r\n  curGames: Game[];\r\n  issueList: any[];\r\n  bestLudanList: any[];\r\n  recentCodeList: any[];\r\n  curServerTime: number;\r\n}\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass Lobby extends Component<Props, object> {\r\n  DEFAULT_GAME_TYPE: string = 'hot';\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let curGames = this.filterAvailableGames(getAllGames()); \r\n    this.state = {\r\n      curGameType: this.DEFAULT_GAME_TYPE,\r\n      curGames,\r\n      issueList: [],\r\n      bestLudanList: [],\r\n      recentCodeList: [],\r\n      curServerTime: 0\r\n    }\r\n  }\r\n  init = () => {\r\n    this.checkFrom();\r\n    const gameIds = this.getGameIds(this.state.curGames).join(',');\r\n    this.getIssuesByGameIds(gameIds);\r\n    this.getBatchBestLudanByGameIds(gameIds);\r\n    this.getBatchRecentCodesByGameIds(gameIds);\r\n  }\r\n  componentWillMount() {\r\n    if (this.state.curGames.length <= 0) {\r\n      this.props.store.game.getAvailableGames((availableGames: number[]) => {\r\n        this.setState({\r\n          curGames: this.filterAvailableGames(getAllGames())\r\n        }, this.init);\r\n      });\r\n    } else {\r\n      this.init();\r\n    }\r\n  }\r\n  goto = (path: string) => {\r\n    this.props.history.push(path);\r\n  }\r\n  onMenuChanged = (type: string) => {\r\n    this.setState({curGames: type === this.DEFAULT_GAME_TYPE ? getAllGames() : getGamesByType(type)})\r\n  }\r\n  filterAvailableGames(games: Game[]) {\r\n    if (this.props.store.game.availableGames.length <= 0) return [];\r\n    let tempGames: Game[] = [];\r\n    games.forEach((game: Game) => {\r\n      // 六合彩没有最优路单，大厅先过虑六合彩\r\n      if (game.id === 28) return;\r\n      if (this.props.store.game.hasAvailableGame(game.id)) {\r\n        tempGames.push(game);\r\n      }\r\n    });\r\n    return tempGames;\r\n  }\r\n  checkFrom() {\r\n    let gameId: string = getUrlParams('gameid');\r\n    if (gameId && this.state.curGames.length > 0) {\r\n      let curGames = this.state.curGames;\r\n      let game = curGames.find((game) => game.id === parseInt(gameId, 10));\r\n      if (game) {\r\n        this.goto(`/game/${gameId}`);\r\n      }\r\n    }\r\n  }\r\n  getGameIds(games: Game[] = []) {\r\n    return games.map((game: Game) => game.id) || [];\r\n  }\r\n  // 批量获取期号\r\n  getIssuesByGameIds(ids: string) {\r\n    APIs.getIssuesByGameIds({gameid: ids}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.setState({issueList: data.items, curServerTime: data.current});\r\n      }\r\n    });\r\n  }\r\n  // 批量获取最优路单\r\n  getBatchBestLudanByGameIds(ids: string) {\r\n    APIs.getBatchBestLudanByGameIds({lotteryId: ids}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.setState({bestLudanList: data.bestLudan});\r\n      }\r\n    });\r\n  }\r\n  // 批量获取历史开奖\r\n  getBatchRecentCodesByGameIds(ids: string) {\r\n    APIs.getBatchRecentCodesByGameIds({gameid: ids}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.setState({recentCodeList: data.data});\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <article className=\"lobby-view\">\r\n        {/* <LobbyMenu onMenuChanged={this.onMenuChanged} /> */}\r\n        <section className=\"flex lobby-game-ls\">\r\n          {this.state.curGames.map((game: Game) => (\r\n            <LobbyGame key={game.id} gameType={this.state.curGameType} gameId={game.id} gameName={game.name} goto={this.goto} issueList={this.state.issueList} bestLudanList={this.state.bestLudanList} recentCodeList={this.state.recentCodeList} curServerTime={this.state.curServerTime} />\r\n          ))}\r\n        </section>\r\n      </article>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Lobby;\r\n"],"sourceRoot":""}