{"version":3,"sources":["views/bet-records/test.tsx"],"names":["page","pageSize","data","dns","key","name","render","x","issue","slice","style","width","Fragment","lotteryName","className","methodName","code","cls","temp","Number","bonus","toFixed","stat","statusCls","statusList","test","inject","observer","props","getOrderList","setState","refreshing","isLoading","isfast","getGameTypeByGameId","parseInt","match","params","id","LOTTERY_TYPES","HC6","orderList","beginDate","Date","_setHMS","_bf","_toAllString","endDate","then","success","recordList","dataSource","state","cloneWithRows","hasMore","length","onRefresh","onEndReached","event","DataSource","rowHasChanged","y","height","document","documentElement","clientHeight","this","ReactDOM","scrollNode","offsetTop","rd","sid","rid","projectId","map","i","ref","el","renderFooter","renderRow","pullToRefresh","initialListSize","React","Component"],"mappings":"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","file":"m/fastm/static/js/6.e41440e9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { PullToRefresh, ListView, Button } from 'antd-mobile'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { orderList } from 'src/http/APIs'\r\nimport { getAllGames, getGameTypeByGameId } from '../../game/games';\r\nimport { LOTTERY_TYPES } from '../../utils/config';\r\n// import Colors from 'src/utils/colorConfig'\r\nimport './test.styl'\r\n\r\n// 分页设置\r\nlet page = 1\r\nconst pageSize = 20\r\n// 数据\r\nlet data = []\r\nconst dns = [\r\n  {key: 'issue', name: '期号',\r\n    render: (x) => x.issue.slice(-6) + '期'\r\n  },\r\n  {key: 'methodName', name: '玩法/内容', style: {width: '25%'},\r\n    render: (x: any) => <React.Fragment>{[<div key=\"1\">{x.lotteryName}</div>, <div key=\"2\" className=\"order-content\">{ x.methodName } - { x.code }</div>]}</React.Fragment>\r\n    // render: (x: any) => <div><span className={`inlb txt-c code-bg ${ getStyle(x.code) }`}>{x.code}</span><span className=\"odd text-orange\">{ (x.dyPointDec.split('-')[0] / 100).toFixed(2) }</span></div>\r\n  },\r\n  {key: 'totalPrice', name: '投注金额'},\r\n  {key: 'bonus', name: '中奖金额', cls: 'txt-c',\r\n    render: (x) => {\r\n      let temp = Number(x.bonus).toFixed(2)\r\n      if (x.stat === 0 || !Number(x.bonus)) {\r\n        return '--'\r\n      }\r\n      if (x.bonus > 0) {\r\n        return <span className=\"c-green\">+{ temp }</span>\r\n      }\r\n      return temp\r\n    }\r\n  },\r\n  {key: 'stat', name: '状态', style: {width: '15%'}, cls: 'txt-r',\r\n    render: (x) => <span className={`inlb status-b txt-c ${ statusCls[x.stat] }`}>{ statusList[x.stat] }</span>\r\n  },\r\n]\r\nconst statusCls = ['c-black', 'c-green', 'c-gray', 'c-red', 'c-gray']\r\nconst statusList = ['未开奖', '已中奖', '未中奖', '已撤单', '平局']\r\n// const getStyle = (data: string) => {\r\n//   if (/\\d/.test(data)) return '';\r\n//   let datas = data.split('-');\r\n//   data = datas.length > 1 ? datas[1] : datas[0]\r\n//   return Colors.getStyle(data);\r\n// }\r\n\r\ninterface MatchParams {\r\n  id: string;\r\n}\r\n\r\ntype Props = IProps & RouteComponentProps<MatchParams>;\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass test extends React.Component<Props, {}> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      dataSource: new ListView.DataSource({\r\n        rowHasChanged: (x, y) => x !== y,\r\n      }),\r\n      refreshing: true,\r\n      isLoading: true,\r\n      height: document.documentElement.clientHeight,\r\n      hasMore: true,\r\n    }\r\n    data = [];\r\n    page = 1;\r\n  }\r\n  componentDidUpdate() {\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      height: this.state.height - ReactDOM.findDOMNode(this.scrollNode).offsetTop\r\n    })\r\n    this.getOrderList()\r\n  }\r\n  getOrderList = () => {\r\n    this.setState({ refreshing: true, isLoading: true })\r\n    const gameType = getGameTypeByGameId(parseInt(this.props.match.params.id, 10));\r\n    const isfast = gameType === LOTTERY_TYPES.HC6 ? 0 : 1;\r\n    orderList({\r\n      beginDate: (new Date())._setHMS('0:0:0')._bf(-6)._toAllString(),\r\n      endDate: (new Date())._setHMS('23:59:59')._toAllString(),\r\n      page: page,\r\n      pageSize: pageSize,\r\n      // lotteryId: this.props.match.params.id,\r\n      isfast\r\n    }).then(({success, recordList}) => {\r\n      if (success === 1) {\r\n        data = [...data, ...recordList]\r\n        page++\r\n        this.setState({\r\n          dataSource: this.state.dataSource.cloneWithRows(data),\r\n          refreshing: false,\r\n          isLoading: false,\r\n          hasMore: recordList.length >= pageSize,\r\n        })\r\n      } else {\r\n        this.setState({\r\n          dataSource: this.state.dataSource.cloneWithRows([]),\r\n          refreshing: false,\r\n          isLoading: false,\r\n        })\r\n      }\r\n    })\r\n  }\r\n  onRefresh = () => {\r\n    page = 0\r\n    data = []\r\n    this.getOrderList()\r\n  }\r\n  onEndReached = (event) => {\r\n    if (this.state.isLoading && !this.state.hasMore) {\r\n      return\r\n    }\r\n    this.getOrderList()\r\n  }\r\n  renderRow (rd: any, sid: any, rid: any) {\r\n    return (\r\n      <div key={rd.projectId} className=\"pdt-40 pdb-20 pdl-10 pdr-10 b-1px-t\">\r\n        { dns.map((x, i) => \r\n          <span key={i} className={`inlb pdl-10 pdr-10 va-t ${x.cls || ''}`} style={x.style || {width: '20%'}}>\r\n            { \r\n              x.render ? x.render(rd) : rd[x.key]\r\n            }\r\n          </span>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"bet-record\">\r\n        <div className=\"bet-record-header pdl-10 pdr-10 fs-24 c-102 hlh-90 bgc-white b-1px-b\">\r\n          { dns.map((x, i) => <span key={i} className={`inlb pdl-10 pdr-10 va-t ${x.cls || ''}`} style={x.style || {width: '20%'}}> {x.name} </span>) }\r\n        </div>\r\n        <ListView\r\n          className=\"fs-24 c-3 fw-b\"\r\n          key={'1'}\r\n          ref={el => this.scrollNode = el}\r\n          dataSource={this.state.dataSource}\r\n          renderFooter={() => (<div className=\"pd-30 txt-c\">\r\n            {this.state.isLoading ? '加载中...' : '加载完毕'}\r\n          </div>)}\r\n          renderRow={this.renderRow}\r\n          style={{height: this.state.height}}\r\n          pullToRefresh={<PullToRefresh\r\n            refreshing={this.state.refreshing}\r\n            onRefresh={this.onRefresh}\r\n          />}\r\n          initialListSize={15}\r\n          onEndReached={this.onEndReached}\r\n          pageSize={pageSize}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default test"],"sourceRoot":""}