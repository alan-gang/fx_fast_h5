{"version":3,"sources":["utils/timer.ts","components/ludan/LudanMenu.tsx","components/ludan/index.tsx","views/lobby/LobbyGameHeader.tsx","views/lobby/LobbyGame.tsx","views/lobby/index.tsx"],"names":["Timer","time","fn","step","timerItval","this","start","window","setInterval","clearInterval","LundanMenu","inject","observer","props","myScrollRef","changeMenu","menu","updateMenu","React","createRef","Bus","emit","selectedMenu","document","querySelector","current","bscroll","scrollToElement","nextProps","refresh","selectedItem","className","ref","tabs","length","map","i","key","name","onClick","title","Component","Ludan","state","setState","updateLudanList","ludanList","getLuDanListByMethod","issueList","slice","gameType","maxRows","maxColumns","getAllTabsByTypeAndName","methodMenuName","defaultMenu","isShowLudanMenu","LudanMenu","LundanTable","isScroll","LobbyGameHeader","timer","remainTime","hours","minutes","seconds","initTimer","timeStr","times","close","Math","floor","t","getNewestIssue","gameId","timeFormat","split","clearTimer","gameName","curIssue","parseInt","LobbyGame","mysocket","getCurIssue","gameid","APIs","then","data","success","issue","curTime","saleend","gotoGame","goto","onIntoGame","store","game","getGameLimitLevelByGameId","limitListItem","getLimitListItemById","isShowLimitSetDialog","limitLevelList","kqPrizeLimit","onLimitChoiceCB","level","updateGamesLimitLevel","onCloseLimitChoiceHandler","bestLudanConfig","getGameTypeByGameId","limitItem","bestLudan","bestLudanName","getLunDanFullTitleByName","codeStyle","getMethodENameByLudanName","ludanTab","getLudanTabByTypeAndName","init","getHistoryIssue","Socket","url","common","broadcaseWSUrl","receive","type","openWinCode","content","lottId","open","send","JSON","stringify","Object","assign","action","id","openHistoryItem","unshift","lastIssue","openNumbers","code","initSocket","historyIssue","items","removeListen","reverse","Lobby","DEFAULT_GAME_TYPE","path","history","push","onMenuChanged","curGames","getAllGames","getGamesByType","filterAvailableGames","curGameType","getAvailableGames","availableGames","games","tempGames","forEach","hasAvailableGame"],"mappings":"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","file":"m/fastm/static/js/4.2c9c2e7c.chunk.js","sourcesContent":["class Timer {\r\n  private timerItval: number = 0;\r\n  private fn: any;\r\n  /**\r\n   * 定时器\r\n   * @param {*} time  时间\r\n   * @param {*} fn    回调函数\r\n   * @param {*} step\r\n   */\r\n  constructor(time: number, fn: any, step?: number) {\r\n    this.fn = fn;\r\n    this.start(time, fn, step);\r\n  }\r\n  private start(time: number, fn: any, step: number = 1000): void {\r\n    this.timerItval = window.setInterval(() => {\r\n      if (time <= 0) {\r\n        clearInterval(this.timerItval);\r\n        fn(0, true);\r\n        return;\r\n      }\r\n      fn(time, false);\r\n      time--;\r\n    }, step);\r\n  }\r\n  public close(): void {\r\n    clearInterval(this.timerItval);\r\n    // this.fn(0, true);\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Bus from '../../utils/eventBus';\r\nimport MyScroll from '../my-scroll';\r\nimport './ludanMenu.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  tabs: any[];\r\n  selectedMenu?: string;\r\n  selectedSubMenu?: string;\r\n  updateMenu(menuName: any): void;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass LundanMenu extends Component<Props, object> {\r\n  myScrollRef: any;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.myScrollRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    Bus.emit('ludanSelectMenuChange', this.props.selectedMenu);\r\n    let selectedItem = document.querySelector('.ludan-menu-view .menu-item.selected');\r\n    selectedItem && this.myScrollRef.current.bscroll.scrollToElement('.menu-item.selected');\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    if (this.props.selectedMenu !== nextProps.selectedMenu) {\r\n      Bus.emit('ludanSelectMenuChange', nextProps.selectedMenu)\r\n    }\r\n    this.myScrollRef.current.refresh();\r\n    let selectedItem = document.querySelector('.ludan-menu-view .menu-item.selected');\r\n    this.myScrollRef.current.bscroll && selectedItem && this.myScrollRef.current.bscroll.scrollToElement(selectedItem, 150, true);\r\n  }\r\n  changeMenu = (menu: any) => {\r\n    this.props.updateMenu(menu);\r\n    // Bus.emit('ludanSelectMenuChange', menu.name);\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"ludan-menu-view\">\r\n        <MyScroll ref={this.myScrollRef}>\r\n          <nav className=\"menu\">\r\n            {this.props.tabs && this.props.tabs.length > 0 && this.props.tabs.map((menu: any, i: number) => (\r\n              <div key={i} className={`menu-item ${this.props.selectedMenu === menu.name ? 'selected' : ''}`} onClick={() => this.changeMenu(menu)}>{menu.title}</div>\r\n            ))}\r\n          </nav>\r\n        </MyScroll>\r\n      </section>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default LundanMenu;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { getLuDanListByMethod, getTabsByType, getAllTabsByTypeAndName } from '../../utils/ludan';\r\nimport LudanMenu from './LudanMenu';\r\nimport LundanTable from './LundanTable';\r\n\r\nimport './index.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  methodMenuName: string;\r\n  maxColumns: number;\r\n  maxRows: number;\r\n  issueList: any[];\r\n  defaultMenu?: string;\r\n  isShowLudanMenu?: boolean;\r\n  isScroll?: boolean;\r\n}\r\n\r\ninterface State {\r\n  tabs: any[];\r\n  selectedMenu?: string;\r\n  ludanList: any[];\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Ludan extends Component<Props, object> {\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let tabs = getAllTabsByTypeAndName(this.props.gameType, this.props.methodMenuName);\r\n    // ssc -> 整合 -> 万位大小\r\n    let selectedMenu = this.props.defaultMenu || (tabs.length > 0 ? tabs[0].name : '');\r\n    let ludanList = getLuDanListByMethod(this.props.issueList.slice(0), this.props.gameType,  selectedMenu || '', this.props.maxRows, this.props.maxColumns) || []\r\n    this.state = {\r\n      selectedMenu,\r\n      ludanList,\r\n      tabs\r\n    }\r\n  }\r\n  updateMenu = (menu: any) => {\r\n    this.setState({\r\n      selectedMenu: menu.name,\r\n    }, this.updateLudanList);\r\n  }\r\n  updateLudanList = () => {\r\n    this.setState({\r\n      ludanList: getLuDanListByMethod(this.props.issueList.slice(0), this.props.gameType, this.state.selectedMenu || '', this.props.maxRows, this.props.maxColumns) || []\r\n    });\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n      let tabs = getAllTabsByTypeAndName(this.props.gameType, this.props.methodMenuName);\r\n      let selectedMenu = nextProps.defaultMenu || (tabs.length > 0 ? tabs[0].name : '');\r\n      let ludanList = getLuDanListByMethod(nextProps.issueList.slice(0), nextProps.gameType,  this.state.selectedMenu || '', nextProps.maxRows, nextProps.maxColumns) || []\r\n      this.setState({\r\n        selectedMenu,\r\n        ludanList,\r\n        tabs\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"ludan-view\">\r\n        {this.props.isShowLudanMenu !== false && <LudanMenu selectedMenu={this.state.selectedMenu} tabs={this.state.tabs} updateMenu={this.updateMenu} />}\r\n        <LundanTable maxColumns={this.props.maxColumns} maxRows={this.props.maxRows} ludanList={this.state.ludanList} isScroll={this.props.isScroll} />\r\n      </section>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default Ludan;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Timer from '../../utils/timer';\r\nimport { timeFormat } from '../../utils/date';\r\n\r\nimport './lobbyGameHeader.styl'\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  curIssue?: string;\r\n  remainTime: number;\r\n  gameName: string;\r\n  getNewestIssue(gameid: number): void;\r\n}\r\n\r\ninterface State {\r\n  timer: any;\r\n  remainTime: number;\r\n  hours: string;\r\n  minutes: string;\r\n  seconds: string;\r\n}\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass LobbyGameHeader extends Component<Props, object> {\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      timer: null,\r\n      remainTime: this.props.remainTime,\r\n      hours: '00',\r\n      minutes: '00',\r\n      seconds: '00'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.initTimer(this.props.remainTime);\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    this.setState({remainTime: nextProps.remainTime});\r\n    this.initTimer(nextProps.remainTime);\r\n  }\r\n  initTimer(remainTime: number) {\r\n    if (remainTime <= 0) return;\r\n    let timer = this.state.timer;\r\n    let timeStr: string = '';\r\n    let times: string[] = [];\r\n    if (timer && timer.close) {\r\n      timer.close();\r\n    }\r\n    timer = new Timer(Math.floor(remainTime), (t: number): void => {\r\n      if (t <= 0) {\r\n        this.props.getNewestIssue(this.props.gameId);\r\n      }\r\n      timeStr = timeFormat(t * 1000);\r\n      times = timeStr.split(':');\r\n      this.setState({hours: times[0], minutes: times[1], seconds: times[2]});\r\n    });\r\n    this.setState({timer});\r\n  }\r\n  clearTimer(): void {\r\n    if (this.state.timer && this.state.timer.close) {\r\n      this.state.timer.close();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.clearTimer();\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"flex ai-c lobby-game-header-view\">\r\n        <div className=\"flex jc-sb ai-c w100 \">\r\n          <div className=\"txt-r cur-issue-wp\">\r\n            <span className=\"fw-b\">{this.props.gameName}</span><span>{this.props.curIssue}期</span>\r\n          </div>\r\n          <div className={`time-wp ${parseInt(this.state.seconds, 10) <= 10 ? 'txt-c-r' : ''}`}>\r\n            {/* <span className=\"hour time-item mg-r-3\">{this.state.hours.split('')[0]}</span>\r\n            <span className=\"hour time-item\">{this.state.hours.split('')[1]}</span>\r\n            <span className=\"colon\">:</span> */}\r\n            <span className=\"minute time-item mg-r-3\">{this.state.minutes.split('')[0]}</span>\r\n            <span className=\"minute time-item\">{this.state.minutes.split('')[1]}</span>\r\n            <span className=\"colon\">:</span>\r\n            <span className=\"second time-item mg-r-3\">{this.state.seconds.split('')[0]}</span>\r\n            <span className=\"second time-item\">{this.state.seconds.split('')[1]}</span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LobbyGameHeader;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport LobbyGameHeader from './LobbyGameHeader';\r\nimport Ludan from 'comp/ludan';\r\n// import { Row, Col, Button } from 'antd-mobile';\r\n// import LimitSetDialog from 'comp/limit-set-dialog';\r\nimport APIs from '../../http/APIs';\r\nimport { getGameTypeByGameId } from '../../game/games';\r\nimport { getLunDanTabByName, getLunDanFullTitleByName, getMethodENameByLudanName, getLudanTabByTypeAndName } from '../../utils/ludan';\r\nimport Socket from '../../socket';\r\n\r\nimport './lobbyGame.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  gameName: string;\r\n  goto(path: string): void;\r\n}\r\n\r\ninterface State {\r\n  gameType: string;\r\n  curIssue: string;\r\n  curTime: number;\r\n  remainTime: number;\r\n  issueList: any[];\r\n  maxColumns: number;\r\n  maxRows: number;\r\n  isShowLudanMenu: boolean;\r\n  bestLudanConfig: any;\r\n  bestLudanName: string;\r\n  isShowLimitSetDialog: boolean;\r\n  limitLevelList: LimitLevelItem[];\r\n  methodMenuName: string;\r\n  defaultMenu?: string;\r\n}\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass LobbyGame extends Component<Props, object> {\r\n  state: State;\r\n  mysocket?: Socket;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let bestLudanConfig: any = {\r\n      'ssc': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '总和大小'},\r\n      '11x5': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '总和大小'},\r\n      'pk10': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '冠亚和值大小'},\r\n      'k3': {methodMenuName: 'diansu', defaultMenu: 'zh_dx', title: '总和大小'},\r\n      'hc6':  {methodMenuName: '', defaultMenu: '', title: '总和大小'}\r\n    };\r\n    let gameType = getGameTypeByGameId(props.gameId);\r\n    let limitItem = props.store.game.getLimitListItemById(props.gameId);\r\n    let bestLudan: BestLudanItem = limitItem && limitItem.bestLudan;\r\n    // let ludanTab = getLunDanTabByName(gameType, bestLudan && bestLudan.codeStyle);\r\n    let bestLudanName = (getLunDanFullTitleByName(gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[gameType].title) + '路单';\r\n    let methodMenuName = getMethodENameByLudanName(gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[gameType].methodMenuName;\r\n    let ludanTab = getLudanTabByTypeAndName(gameType, methodMenuName, bestLudan && bestLudan.codeStyle);\r\n    let defaultMenu = (ludanTab && ludanTab.name) || bestLudanConfig[gameType].defaultMenu;\r\n    this.state = {\r\n      gameType,\r\n      curIssue: '',\r\n      curTime: 0,\r\n      remainTime: 0,\r\n      issueList: [],\r\n      maxColumns: 19,\r\n      maxRows: 6,\r\n      isShowLudanMenu: false,\r\n      bestLudanConfig,\r\n      bestLudanName: bestLudanName,\r\n      isShowLimitSetDialog: false,\r\n      limitLevelList: [],\r\n      methodMenuName,\r\n      defaultMenu\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    this.init();\r\n  }\r\n  init() {\r\n    this.getCurIssue(this.props.gameId);\r\n    this.getHistoryIssue(this.props.gameId);\r\n  }\r\n  initSocket() {\r\n    this.mysocket = new Socket({\r\n      url: this.props.store.common.broadcaseWSUrl,\r\n      name: 'lobbyGame' + this.props.gameId,\r\n      receive: (data) => {\r\n        if (data.type === 'openWinCode') {\r\n          this.openWinCode(parseInt(data.content[0].lottId, 10), data.content[0]);\r\n        }\r\n      },\r\n      open: () => {\r\n        this.mysocket && this.mysocket.send(JSON.stringify(Object.assign({action: 'noauth'}, {})));\r\n      }\r\n    }, true);\r\n  }\r\n  openWinCode(id: number, openHistoryItem: any) {\r\n    if (id === this.props.gameId) {\r\n      let issueList = this.state.issueList;\r\n      issueList.unshift(openHistoryItem);\r\n      this.setState({\r\n        lastIssue: issueList[0].issue,\r\n        openNumbers: issueList[0].code.split(','),\r\n        issueList: issueList\r\n      });\r\n      this.getCurIssue(this.props.gameId);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.initSocket();\r\n  }\r\n  getCurIssue = (gameid: number) => {\r\n    APIs.curIssue({gameid}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.setState({\r\n          curIssue: data.issue,\r\n          curTime: data.current,\r\n          remainTime: Math.floor((data.saleend - data.current) / 1000) || (this.state.remainTime + 0.05)\r\n        })\r\n      } else {\r\n        this.setState({curIssue: ''});\r\n      }\r\n    });\r\n  }\r\n  getHistoryIssue(gameid: number) {\r\n    APIs.historyIssue({gameid}).then((data: any) => {\r\n      if (data.success === 1) {\r\n        if (data.items.length > 0) {\r\n          this.setState({\r\n            lastIssue: data.items[0].issue,\r\n            openNumbers: data.items[0].code.split(','),\r\n            issueList: data.items\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  gotoGame = () => {\r\n    this.props.goto(`/game/${this.props.gameId}`);\r\n  }\r\n  onIntoGame = () => {\r\n    if (this.props.store.game.getGameLimitLevelByGameId(this.props.gameId)) {\r\n      this.gotoGame();\r\n    } else {\r\n      let limitListItem = this.props.store.game.getLimitListItemById(this.props.gameId);\r\n      this.setState({isShowLimitSetDialog: true, limitLevelList: limitListItem ? limitListItem.kqPrizeLimit : []});\r\n    }\r\n  }\r\n  onLimitChoiceCB = (level: number) => {\r\n    this.props.store.game.updateGamesLimitLevel({gameId: this.props.gameId, level});\r\n    this.gotoGame();\r\n  }\r\n  onCloseLimitChoiceHandler = () => {\r\n    this.setState({isShowLimitSetDialog: false});\r\n  }\r\n  componentWillUnmount() {\r\n    this.mysocket && this.mysocket.removeListen();\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"lobby-game-view crs-p\" onClick={this.gotoGame}>\r\n        <LobbyGameHeader gameType={this.props.gameType} gameId={this.props.gameId} curIssue={this.state.curIssue} remainTime={this.state.remainTime} gameName={this.props.gameName} getNewestIssue={this.getCurIssue} />\r\n        <div className=\"best-dudan-name\">{this.state.bestLudanName}</div>\r\n        <div className=\"ludan-wp\">\r\n          <Ludan \r\n            isShowLudanMenu={this.state.isShowLudanMenu} \r\n            gameId={this.props.gameId} \r\n            gameType={this.state.gameType} \r\n            maxColumns={this.state.maxColumns} \r\n            maxRows={this.state.maxRows} \r\n            issueList={this.state.issueList.slice(0).reverse()} \r\n            methodMenuName={this.state.methodMenuName} \r\n            defaultMenu={this.state.defaultMenu} \r\n            isScroll={false}\r\n          />\r\n        </div>\r\n        {/* <LimitSetDialog isShow={this.state.isShowLimitSetDialog} gameId={this.props.gameId} limitLevelList={this.state.limitLevelList} onLimitChoiceCB={this.onLimitChoiceCB} onCloseHandler={this.onCloseLimitChoiceHandler} /> */}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LobbyGame;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n// import LobbyMenu from './LobbyMenu';\r\nimport LobbyGame from './LobbyGame';\r\nimport { getGamesByType, getAllGames } from '../../game/games';\r\nimport { Game } from '../../typings/games';\r\n\r\nimport './index.styl';\r\n\r\ninterface IProps {\r\n  store?: any;\r\n  gameType?: string;\r\n}\r\n\r\ntype Props = IProps & RouteComponentProps;\r\n\r\ninterface State {\r\n  curGameType: string;\r\n  curGames: Game[]\r\n}\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass Lobby extends Component<Props, object> {\r\n  DEFAULT_GAME_TYPE: string = 'hot';\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let curGames = this.filterAvailableGames(getAllGames()); \r\n    this.state = {\r\n      curGameType: this.DEFAULT_GAME_TYPE,\r\n      curGames\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    if (this.state.curGames.length <= 0) {\r\n      this.props.store.game.getAvailableGames((availableGames: number[]) => {\r\n        this.setState({\r\n          curGames: this.filterAvailableGames(getAllGames())\r\n        })\r\n      });\r\n    }\r\n  }\r\n  goto = (path: string) => {\r\n    this.props.history.push(path)\r\n  }\r\n  onMenuChanged = (type: string) => {\r\n    this.setState({curGames: type === this.DEFAULT_GAME_TYPE ? getAllGames() : getGamesByType(type)})\r\n  }\r\n  filterAvailableGames(games: Game[]) {\r\n    if (this.props.store.game.availableGames.length <= 0) return [];\r\n    let tempGames: Game[] = [];\r\n    games.forEach((game: Game) => {\r\n      if (this.props.store.game.hasAvailableGame(game.id)) {\r\n        tempGames.push(game);\r\n      }\r\n    });\r\n    return tempGames;\r\n  }\r\n  render() {\r\n    return (\r\n      <article className=\"lobby-view\">\r\n        {/* <LobbyMenu onMenuChanged={this.onMenuChanged} /> */}\r\n        <section className=\"flex lobby-game-ls\">\r\n          {this.state.curGames.map((game: Game) => (\r\n            <LobbyGame key={game.id} gameType={this.state.curGameType} gameId={game.id} gameName={game.name} goto={this.goto}/>\r\n          ))}\r\n        </section>\r\n      </article>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Lobby;\r\n"],"sourceRoot":""}