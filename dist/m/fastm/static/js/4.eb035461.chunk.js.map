{"version":3,"sources":["utils/timer.ts","components/ludan/LudanMenu.tsx","components/ludan/index.tsx","views/lobby/LobbyGameHeader.tsx","views/lobby/LobbyGame.tsx","views/lobby/index.tsx"],"names":["Timer","time","fn","step","timerItval","this","start","window","setInterval","clearInterval","LundanMenu","inject","observer","props","myScrollRef","scrollToSelectedElement","selectedItem","document","querySelector","current","bscroll","x","scrollToElement","changeMenu","menu","updateMenu","React","createRef","nextProps","refresh","className","ref","tabs","length","map","i","key","selectedMenu","name","onClick","title","Component","Ludan","state","setState","updateLudanList","ludanList","getLuDanListByMethod","issueList","slice","gameType","maxRows","maxColumns","getAllTabsByTypeAndName","methodMenuName","defaultMenu","isShowLudanMenu","LudanMenu","LundanTable","isScroll","LobbyGameHeader","timer","remainTime","hours","minutes","seconds","initTimer","timeStr","times","close","Math","floor","t","getNewestIssue","gameId","timeFormat","split","clearTimer","gameName","curIssue","parseInt","bestLudanConfig","LobbyGame","inject_unmount","mysocket","init","getCurIssue","getHistoryIssue","gameid","APIs","then","data","success","issue","curTime","saleend","gotoGame","goto","onIntoGame","store","game","getGameLimitLevelByGameId","limitListItem","getLimitListItemById","isShowLimitSetDialog","limitLevelList","kqPrizeLimit","onLimitChoiceCB","level","updateGamesLimitLevel","onCloseLimitChoiceHandler","getGameTypeByGameId","limitItem","bestLudan","bestLudanName","getLunDanFullTitleByName","codeStyle","getMethodENameByLudanName","ludanTab","getLudanTabByTypeAndName","initDataFromProps","getCurIssueFromProps","getBestLudanFromPropsByGameId","bestLudanList","getHistoryIssueFromProps","recentCodeList","Socket","url","common","broadcaseWSUrl","receive","type","content","lottId","openWinCode","setTimeout","getLimitData","open","params","action","user","login","parameter","userId","app","send","JSON","stringify","id","openHistoryItem","unshift","lastIssue","openNumbers","code","initSocket","curServerTime","find","lotteryid","historyIssue","items","item","removeListen","Fragment","pos","notifyVal","notifyType","contCount","unit","updateLimitListItemBestLudan","getBestLudan","lotteryId","updateBestLudan","besetLudan","ludan","renderBestLudanTxt","reverse","PAGE_SIZE","curPageNo","totalPage","Lobby","DEFAULT_GAME_TYPE","reflv","checkFrom","gameIds","getGameIds","curGames","ceil","loadMore","path","history","push","onMenuChanged","getAllGames","getGamesByType","loadData","isLoading","join","getIssuesByGameIds","getBatchBestLudanByGameIds","getBatchRecentCodesByGameIds","gamesDataSource","cloneWithRows","renderItem","curGameType","onEndReached","filterAvailableGames","DataSource","rowHasChanged","row1","row2","getAvailableGames","availableGames","games","tempGames","forEach","hasAvailableGame","getUrlParams","ids","updateIssues","updateBestLudans","updateRecentCodes","datas","found","findIndex","splice","recentCode","el","dataSource","renderFooter","style","padding","textAlign","renderRow","pageSize","onEndReachedThreshold"],"mappings":"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","file":"m/fastm/static/js/4.eb035461.chunk.js","sourcesContent":["class Timer {\r\n  private timerItval: number = 0;\r\n  private fn: any;\r\n  /**\r\n   * 定时器\r\n   * @param {*} time  时间\r\n   * @param {*} fn    回调函数\r\n   * @param {*} step\r\n   */\r\n  constructor(time: number, fn: any, step?: number) {\r\n    this.fn = fn;\r\n    this.start(time, fn, step);\r\n  }\r\n  private start(time: number, fn: any, step: number = 1000): void {\r\n    this.timerItval = window.setInterval(() => {\r\n      if (time <= 0) {\r\n        clearInterval(this.timerItval);\r\n        fn(0, true);\r\n        return;\r\n      }\r\n      fn(time, false);\r\n      time--;\r\n    }, step);\r\n  }\r\n  public close(): void {\r\n    clearInterval(this.timerItval);\r\n    // this.fn(0, true);\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Bus from '../../utils/eventBus';\r\nimport MyScroll from '../my-scroll';\r\nimport './ludanMenu.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  tabs: any[];\r\n  selectedMenu?: string;\r\n  selectedSubMenu?: string;\r\n  methodMenuName?: string;\r\n  updateMenu(menuName: any): void;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass LundanMenu extends Component<Props, object> {\r\n  myScrollRef: any;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.myScrollRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToSelectedElement();\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    this.myScrollRef.current.refresh();\r\n    this.scrollToSelectedElement();\r\n  }\r\n  scrollToSelectedElement = () => {\r\n    let selectedItem = document.querySelector('.ludan-menu-view .menu-item.selected');\r\n    if (this.myScrollRef.current.bscroll && selectedItem && this.myScrollRef.current.bscroll) {\r\n      this.myScrollRef.current.bscroll.x += 1;\r\n      this.myScrollRef.current.bscroll.scrollToElement(selectedItem, 150, true);\r\n    }\r\n  }\r\n  changeMenu = (menu: any) => {\r\n    this.props.updateMenu(menu);\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"ludan-menu-view\">\r\n        <MyScroll ref={this.myScrollRef}>\r\n          <nav className=\"menu\">\r\n            {this.props.tabs && this.props.tabs.length > 0 && this.props.tabs.map((menu: any, i: number) => (\r\n              <div key={i} className={`menu-item ${this.props.selectedMenu === menu.name ? 'selected' : ''}`} onClick={() => this.changeMenu(menu)}>{menu.title}</div>\r\n            ))}\r\n          </nav>\r\n        </MyScroll>\r\n      </section>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default LundanMenu;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { getLuDanListByMethod, getTabsByType, getAllTabsByTypeAndName } from '../../utils/ludan';\r\nimport LudanMenu from './LudanMenu';\r\nimport LundanTable from './LundanTable';\r\n\r\nimport './index.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  methodMenuName: string;\r\n  maxColumns: number;\r\n  maxRows: number;\r\n  issueList: any[];\r\n  defaultMenu?: string;\r\n  isShowLudanMenu?: boolean;\r\n  isScroll?: boolean;\r\n}\r\n\r\ninterface State {\r\n  tabs: any[];\r\n  selectedMenu?: string;\r\n  ludanList: any[];\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Ludan extends Component<Props, object> {\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let tabs = getAllTabsByTypeAndName(this.props.gameType, this.props.methodMenuName);\r\n    // ssc -> 整合 -> 万位大小\r\n    let selectedMenu = this.props.defaultMenu || (tabs.length > 0 ? tabs[0].name : '');\r\n    let ludanList = getLuDanListByMethod(this.props.issueList.slice(0), this.props.gameType,  selectedMenu || '', this.props.maxRows, this.props.maxColumns - 1) || []\r\n    this.state = {\r\n      selectedMenu,\r\n      ludanList,\r\n      tabs\r\n    }\r\n  }\r\n  updateMenu = (menu: any) => {\r\n    this.setState({\r\n      selectedMenu: menu.name,\r\n    }, this.updateLudanList);\r\n  }\r\n  updateLudanList = () => {\r\n    this.setState({\r\n      ludanList: getLuDanListByMethod(this.props.issueList.slice(0), this.props.gameType, this.state.selectedMenu || '', this.props.maxRows, this.props.maxColumns) || []\r\n    });\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    let tabs = getAllTabsByTypeAndName(nextProps.gameType, nextProps.methodMenuName);\r\n    let selectedMenu = nextProps.defaultMenu || (tabs.length > 0 ? tabs[0].name : '');\r\n    let ludanList = getLuDanListByMethod(nextProps.issueList.slice(0), nextProps.gameType,  selectedMenu || '', nextProps.maxRows, nextProps.maxColumns) || []\r\n    this.setState({\r\n      selectedMenu,\r\n      ludanList,\r\n      tabs\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"ludan-view\">\r\n        {this.props.isShowLudanMenu !== false && <LudanMenu selectedMenu={this.state.selectedMenu} tabs={this.state.tabs} updateMenu={this.updateMenu} methodMenuName={this.props.methodMenuName} />}\r\n        <LundanTable maxColumns={this.props.maxColumns} maxRows={this.props.maxRows} ludanList={this.state.ludanList} isScroll={this.props.isScroll} />\r\n      </section>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default Ludan;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Timer from '../../utils/timer';\r\nimport { timeFormat } from '../../utils/date';\r\n\r\nimport './lobbyGameHeader.styl'\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  curIssue?: string;\r\n  remainTime: number;\r\n  gameName: string;\r\n  getNewestIssue(gameid: number): void;\r\n}\r\n\r\ninterface State {\r\n  timer: any;\r\n  remainTime: number;\r\n  hours: string;\r\n  minutes: string;\r\n  seconds: string;\r\n}\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass LobbyGameHeader extends Component<Props, object> {\r\n  state: State;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      timer: null,\r\n      remainTime: this.props.remainTime,\r\n      hours: '00',\r\n      minutes: '00',\r\n      seconds: '00'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.initTimer(this.props.remainTime);\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    this.setState({remainTime: nextProps.remainTime});\r\n    this.initTimer(nextProps.remainTime);\r\n  }\r\n  initTimer(remainTime: number) {\r\n    if (remainTime <= 0) return;\r\n    let timer = this.state.timer;\r\n    let timeStr: string = '';\r\n    let times: string[] = [];\r\n    if (timer && timer.close) {\r\n      timer.close();\r\n    }\r\n    timer = new Timer(Math.floor(remainTime), (t: number): void => {\r\n      if (t <= 0) {\r\n        this.props.getNewestIssue(this.props.gameId);\r\n      }\r\n      timeStr = timeFormat(t * 1000);\r\n      times = timeStr.split(':');\r\n      this.setState({hours: times[0], minutes: times[1], seconds: times[2]});\r\n    });\r\n    this.setState({timer});\r\n  }\r\n  clearTimer(): void {\r\n    if (this.state.timer && this.state.timer.close) {\r\n      this.state.timer.close();\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.clearTimer();\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"flex ai-c lobby-game-header-view\">\r\n        <div className=\"flex jc-sb ai-c w100 \">\r\n          <div className=\"txt-r cur-issue-wp\">\r\n            <span className=\"fw-b\">{this.props.gameName}</span><span>{this.props.curIssue}期</span>\r\n          </div>\r\n          <div className={`time-wp ${this.state.hours === '00' && this.state.minutes === '00' && parseInt(this.state.seconds, 10) <= 10 ? 'txt-c-r' : ''}`}>\r\n            {/* <span className=\"hour time-item mg-r-3\">{this.state.hours.split('')[0]}</span>\r\n            <span className=\"hour time-item\">{this.state.hours.split('')[1]}</span>\r\n            <span className=\"colon\">:</span> */}\r\n            <span className=\"minute time-item mg-r-3\">{this.state.minutes.split('')[0]}</span>\r\n            <span className=\"minute time-item\">{this.state.minutes.split('')[1]}</span>\r\n            <span className=\"colon\">:</span>\r\n            <span className=\"second time-item mg-r-3\">{this.state.seconds.split('')[0]}</span>\r\n            <span className=\"second time-item\">{this.state.seconds.split('')[1]}</span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LobbyGameHeader;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport LobbyGameHeader from './LobbyGameHeader';\r\nimport Ludan from 'comp/ludan';\r\n// import { Row, Col, Button } from 'antd-mobile';\r\n// import LimitSetDialog from 'comp/limit-set-dialog';\r\nimport APIs from '../../http/APIs';\r\nimport { getGameTypeByGameId } from '../../game/games';\r\nimport { getLunDanTabByName, getLunDanFullTitleByName, getMethodENameByLudanName, getLudanTabByTypeAndName } from '../../utils/ludan';\r\nimport Socket from '../../socket';\r\nimport inject_unmount from '../../decorator/inject_unmount';\r\nimport './lobbyGame.styl';\r\n\r\ninterface Props {\r\n  store?: any;\r\n  gameType: string;\r\n  gameId: number;\r\n  gameName: string;\r\n  goto(path: string): void;\r\n  issueList: any[];\r\n  bestLudanList: any[];\r\n  recentCodeList: any[];\r\n  curServerTime: number;\r\n}\r\n\r\ninterface State {\r\n  gameType: string;\r\n  curIssue: string;\r\n  curTime: number;\r\n  remainTime: number;\r\n  issueList: any[];\r\n  maxColumns: number;\r\n  maxRows: number;\r\n  isShowLudanMenu: boolean;\r\n  bestLudanConfig: any;\r\n  bestLudanName: string;\r\n  isShowLimitSetDialog: boolean;\r\n  limitLevelList: LimitLevelItem[];\r\n  methodMenuName: string;\r\n  defaultMenu?: string;\r\n  bestLudan: BestLudanItem;\r\n}\r\n\r\nlet bestLudanConfig: any = {\r\n  'ssc': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '总和大小'},\r\n  '11x5': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '总和大小'},\r\n  'pk10': {methodMenuName: 'zhenghe', defaultMenu: 'zh_dx', title: '冠亚和值大小'},\r\n  'k3': {methodMenuName: 'diansu', defaultMenu: 'zh_dx', title: '总和大小'},\r\n  'hc6':  {methodMenuName: '', defaultMenu: '', title: '总和大小'}\r\n};\r\n\r\n@inject(\"store\")\r\n@observer\r\n@inject_unmount\r\nclass LobbyGame extends Component<Props, object> {\r\n  state: State;\r\n  mysocket?: Socket;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let gameType = getGameTypeByGameId(props.gameId);\r\n    let limitItem = props.store.game.getLimitListItemById(props.gameId);\r\n    let bestLudan: BestLudanItem = limitItem && limitItem.bestLudan;\r\n    // console.log('bestLudan=', JSON.stringify(limitItem && limitItem.bestLudan));\r\n    // let ludanTab = getLunDanTabByName(gameType, bestLudan && bestLudan.codeStyle);\r\n    let bestLudanName = (getLunDanFullTitleByName(gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[gameType].title) + '路单';\r\n    let methodMenuName = getMethodENameByLudanName(gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[gameType].methodMenuName;\r\n    let ludanTab = getLudanTabByTypeAndName(gameType, methodMenuName, bestLudan && bestLudan.codeStyle);\r\n    let defaultMenu = (ludanTab && ludanTab.name) || bestLudanConfig[gameType].defaultMenu;\r\n    this.state = {\r\n      gameType,\r\n      curIssue: '',\r\n      curTime: 0,\r\n      remainTime: 0,\r\n      issueList: [],\r\n      maxColumns: 19,\r\n      maxRows: 6,\r\n      isShowLudanMenu: false,\r\n      bestLudanConfig,\r\n      bestLudanName: bestLudanName,\r\n      isShowLimitSetDialog: false,\r\n      limitLevelList: [],\r\n      methodMenuName,\r\n      defaultMenu,\r\n      bestLudan\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    // this.init();\r\n    this.initDataFromProps();\r\n  }\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    // console.log('LobbyGame=', nextProps.store.game.getLimitListItemById(nextProps.gameId), nextProps.recentCodeList, this.props.gameId)\r\n    // console.log('nextProps=', nextProps)\r\n    this.getCurIssueFromProps(this.props.gameId, nextProps.issueList);\r\n    this.getBestLudanFromPropsByGameId(this.props.gameId, nextProps.bestLudanList);\r\n    this.getHistoryIssueFromProps(this.props.gameId, nextProps.recentCodeList);\r\n  }\r\n  init = () => {\r\n    this.getCurIssue(this.props.gameId);\r\n    this.getHistoryIssue(this.props.gameId);\r\n  }\r\n  initDataFromProps() {\r\n    this.getCurIssueFromProps(this.props.gameId);\r\n    this.getBestLudanFromPropsByGameId(this.props.gameId);\r\n    this.getHistoryIssueFromProps(this.props.gameId);\r\n  }\r\n  initSocket() {\r\n    this.mysocket = new Socket({\r\n      url: this.props.store.common.broadcaseWSUrl,\r\n      name: 'lobbyGame' + this.props.gameId,\r\n      receive: (data) => {\r\n        if (data.type === 'openWinCode') {\r\n          if (data.content && data.content.length > 0 && parseInt(data.content[0].lottId, 10) === this.props.gameId) {\r\n            this.openWinCode(parseInt(data.content[0].lottId, 10), data.content[0]);\r\n            setTimeout(() => {\r\n              this.getLimitData(this.props.gameId);\r\n            }, 2000)\r\n          }\r\n        }\r\n      },\r\n      open: () => {\r\n        if (this.mysocket) {\r\n          let params: any = {action: 'noauth'};\r\n          if (this.props.store.user.login) {\r\n            params = {\r\n              parameter: {\r\n                userId: this.props.store.user.userId,\r\n                app: 'web'\r\n              },\r\n              action: 'auth'\r\n            };\r\n          }\r\n          this.mysocket.send(JSON.stringify(params));\r\n        }\r\n      }\r\n    }, true);\r\n  }\r\n  openWinCode(id: number, openHistoryItem: any) {\r\n    if (id === this.props.gameId) {\r\n      let issueList = this.state.issueList;\r\n      issueList.unshift(openHistoryItem);\r\n      this.setState({\r\n        lastIssue: issueList[0].issue,\r\n        openNumbers: issueList[0].code.split(','),\r\n        issueList: issueList\r\n      });\r\n      this.getCurIssue(this.props.gameId);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.initSocket();\r\n  }\r\n  getCurIssue = (gameid: number) => {\r\n    APIs.curIssue({gameid}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.setState({\r\n          curIssue: data.issue,\r\n          curTime: data.current,\r\n          remainTime: Math.floor((data.saleend - data.current) / 1000) || (this.state.remainTime + 0.05)\r\n        })\r\n      } else {\r\n        this.setState({curIssue: ''});\r\n      }\r\n    });\r\n  }\r\n  getCurIssueFromProps(gameid: number, issueList: any[] = [], curServerTime?: number) {\r\n    issueList = issueList.length > 0 ? issueList : this.props.issueList;\r\n    curServerTime = curServerTime || this.props.curServerTime;\r\n    if (issueList && issueList.length > 0) {\r\n      let data = issueList.find((issue) => issue.lotteryid === gameid);\r\n      if (data) {\r\n        this.setState({\r\n          curIssue: data.issue,\r\n          curTime: curServerTime,\r\n          remainTime: Math.floor((data.saleend - curServerTime) / 1000) || (this.state.remainTime + 0.05)\r\n        })\r\n      }\r\n    }\r\n  }\r\n  getHistoryIssue(gameid: number) {\r\n    APIs.historyIssue({gameid}).then((data: any) => {\r\n      if (data.success === 1) {\r\n        if (data.items.length > 0) {\r\n          this.setState({\r\n            lastIssue: data.items[0].issue,\r\n            openNumbers: data.items[0].code.split(','),\r\n            issueList: data.items\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  getHistoryIssueFromProps(gameid: number, recentCodeList: any[] = []) {\r\n    recentCodeList = recentCodeList.length > 0 ? recentCodeList : this.props.recentCodeList;\r\n    if (recentCodeList && recentCodeList.length > 0) {\r\n      let data = recentCodeList.find((item) => item[gameid] && item[gameid].length > 0);\r\n      data = data && data[gameid];\r\n      if (data) {\r\n        this.setState({\r\n          lastIssue: data[0].issue,\r\n          openNumbers: data[0].code.split(','),\r\n          issueList: data\r\n        });\r\n      }\r\n    }\r\n  }\r\n  gotoGame = () => {\r\n    this.props.goto(`/game/${this.props.gameId}`);\r\n  }\r\n  onIntoGame = () => {\r\n    if (this.props.store.game.getGameLimitLevelByGameId(this.props.gameId)) {\r\n      this.gotoGame();\r\n    } else {\r\n      let limitListItem = this.props.store.game.getLimitListItemById(this.props.gameId);\r\n      this.setState({isShowLimitSetDialog: true, limitLevelList: limitListItem ? limitListItem.kqPrizeLimit : []});\r\n    }\r\n  }\r\n  onLimitChoiceCB = (level: number) => {\r\n    this.props.store.game.updateGamesLimitLevel({gameId: this.props.gameId, level});\r\n    this.gotoGame();\r\n  }\r\n  onCloseLimitChoiceHandler = () => {\r\n    this.setState({isShowLimitSetDialog: false});\r\n  }\r\n  componentWillUnmount() {\r\n    this.mysocket && this.mysocket.removeListen();\r\n  }\r\n  renderBestLudanTxt() {\r\n    let bestLudan = this.state.bestLudan;\r\n    if (!bestLudan) return <div></div>\r\n    return <React.Fragment>\r\n      <div>\r\n        <span className=\"mgr-20\">{ bestLudan.pos }<span className=\"c-red\">{ bestLudan.notifyVal }</span>路单</span>\r\n      </div>\r\n      <div>\r\n        <span>{[null, '长龙', '单跳', '单边跳', '一厅两房', '拍拍连'][bestLudan.notifyType] || '连出' }<span className=\"c-red\">{ bestLudan.contCount }</span>{bestLudan.unit}</span>\r\n      </div>\r\n    </React.Fragment>\r\n  }\r\n  updateBestLudan(bestLudan: BestLudanItem) {\r\n    let bestLudanName = (getLunDanFullTitleByName(this.state.gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[this.state.gameType].title) + '路单';\r\n    let methodMenuName = getMethodENameByLudanName(this.state.gameType, bestLudan && bestLudan.codeStyle) || bestLudanConfig[this.state.gameType].methodMenuName;\r\n    let ludanTab = getLudanTabByTypeAndName(this.state.gameType, methodMenuName, bestLudan && bestLudan.codeStyle);\r\n    let defaultMenu = (ludanTab && ludanTab.name) || bestLudanConfig[this.state.gameType].defaultMenu;\r\n    // console.log('id=', id, 'methodMenuName=', methodMenuName, ' defaultMenu=', defaultMenu)\r\n    this.setState({\r\n      bestLudanName: bestLudanName,\r\n      methodMenuName,\r\n      defaultMenu,\r\n      bestLudan\r\n    });\r\n    this.props.store.game.updateLimitListItemBestLudan(bestLudan);\r\n  }\r\n  getLimitData(id: number) {\r\n    APIs.getBestLudan({lotteryId: id}).then((data: any) => {\r\n      if (data.success === 1) {\r\n        if (data.bestLudan) {\r\n          this.updateBestLudan(data.bestLudan);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  getBestLudanFromPropsByGameId(id: number, bestLudanList: any[] = []) {\r\n    bestLudanList = bestLudanList.length > 0 ? bestLudanList : this.props.bestLudanList;\r\n    if (bestLudanList && bestLudanList.length > 0) {\r\n      let besetLudan = this.props.bestLudanList.find((ludan) => ludan.lotteryId === id)\r\n      if (besetLudan) {\r\n        this.updateBestLudan(besetLudan);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"lobby-game-view crs-p\" onClick={this.gotoGame}>\r\n        <LobbyGameHeader gameType={this.props.gameType} gameId={this.props.gameId} curIssue={this.state.curIssue} remainTime={this.state.remainTime} gameName={this.props.gameName} getNewestIssue={this.getCurIssue} />\r\n        <div className=\"flex jc-sb best-dudan-name\">\r\n          {/* <div>{this.state.bestLudanName}</div> */}\r\n          {this.renderBestLudanTxt()}\r\n        </div>\r\n        <div className=\"ludan-wp\">\r\n          <Ludan \r\n            isShowLudanMenu={this.state.isShowLudanMenu} \r\n            gameId={this.props.gameId} \r\n            gameType={this.state.gameType} \r\n            maxColumns={this.state.maxColumns} \r\n            maxRows={this.state.maxRows} \r\n            issueList={this.state.issueList.slice(0).reverse()} \r\n            methodMenuName={this.state.methodMenuName} \r\n            defaultMenu={this.state.defaultMenu} \r\n            isScroll={false}\r\n          />\r\n        </div>\r\n        {/* <LimitSetDialog isShow={this.state.isShowLimitSetDialog} gameId={this.props.gameId} limitLevelList={this.state.limitLevelList} onLimitChoiceCB={this.onLimitChoiceCB} onCloseHandler={this.onCloseLimitChoiceHandler} /> */}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LobbyGame;\r\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { PullToRefresh, ListView } from 'antd-mobile';\r\nimport LobbyGame from './LobbyGame';\r\nimport { getGamesByType, getAllGames } from '../../game/games';\r\nimport { Game } from '../../typings/games';\r\nimport { getUrlParams } from '../../utils/common';\r\nimport APIs from '../../http/APIs';\r\n\r\nimport './index.styl';\r\n\r\ninterface IProps {\r\n  store?: any;\r\n  gameType?: string;\r\n}\r\n\r\ntype Props = IProps & RouteComponentProps;\r\n\r\ninterface State {\r\n  curGameType: string;\r\n  curGames: Game[];\r\n  gamesDataSource: any;\r\n  issueList: any[];\r\n  bestLudanList: any[];\r\n  recentCodeList: any[];\r\n  curServerTime: number;\r\n  isLoading: boolean;\r\n  gameIds: string[];\r\n}\r\n\r\nconst PAGE_SIZE = 5;\r\nlet curPageNo = 1;\r\nlet totalPage = 1;\r\n@inject(\"store\")\r\n@observer\r\nclass Lobby extends Component<Props, object> {\r\n  DEFAULT_GAME_TYPE: string = 'hot';\r\n  state: State;\r\n  reflv: any;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    let curGames = this.filterAvailableGames(getAllGames()); \r\n    this.state = {\r\n      curGameType: this.DEFAULT_GAME_TYPE,\r\n      curGames,\r\n      gamesDataSource: new ListView.DataSource({\r\n        rowHasChanged: (row1: any, row2: any) => true\r\n      }),\r\n      issueList: [],\r\n      bestLudanList: [],\r\n      recentCodeList: [],\r\n      curServerTime: 0,\r\n      isLoading: false,\r\n      gameIds: []\r\n    }\r\n  }\r\n  init = () => {\r\n    this.checkFrom();\r\n    const gameIds = this.getGameIds(this.state.curGames);\r\n    totalPage = Math.ceil(gameIds.length / PAGE_SIZE);\r\n    this.setState({gameIds}, this.loadMore);\r\n  }\r\n  componentWillMount() {\r\n    curPageNo = 1;\r\n    totalPage = 1;\r\n    if (this.state.curGames.length <= 0) {\r\n      this.props.store.game.getAvailableGames((availableGames: number[]) => {\r\n        this.setState({\r\n          curGames: this.filterAvailableGames(getAllGames())\r\n        }, this.init);\r\n      });\r\n    } else {\r\n      this.init();\r\n    }\r\n  }\r\n  goto = (path: string) => {\r\n    this.props.history.push(path);\r\n  }\r\n  onMenuChanged = (type: string) => {\r\n    this.setState({curGames: type === this.DEFAULT_GAME_TYPE ? getAllGames() : getGamesByType(type)})\r\n  }\r\n  /**\r\n   * 过虑游戏\r\n   * @param games \r\n   */\r\n  filterAvailableGames(games: Game[]) {\r\n    if (this.props.store.game.availableGames.length <= 0) return [];\r\n    let tempGames: Game[] = [];\r\n    games.forEach((game: Game) => {\r\n      // 六合彩没有最优路单，大厅先过虑六合彩\r\n      if (game.id === 28) return;\r\n      if (this.props.store.game.hasAvailableGame(game.id)) {\r\n        tempGames.push(game);\r\n      }\r\n    });\r\n    return tempGames;\r\n  }\r\n  checkFrom() {\r\n    let gameId: string = getUrlParams('gameid');\r\n    if (gameId && this.state.curGames.length > 0) {\r\n      let curGames = this.state.curGames;\r\n      let game = curGames.find((game) => game.id === parseInt(gameId, 10));\r\n      if (game) {\r\n        this.goto(`/game/${gameId}`);\r\n      }\r\n    }\r\n  }\r\n  getGameIds(games: Game[] = []) {\r\n    return games.map((game: Game) => game.id) || [];\r\n  }\r\n  /**\r\n   * 批量获取奖期数据\r\n   * @param ids 游戏ID列表字符串\r\n   */\r\n  getIssuesByGameIds(ids: string) {\r\n    APIs.getIssuesByGameIds({gameid: ids}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.updateIssues(data.items, data.current);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 批量获取最优路单\r\n   * @param ids 游戏ID列表字符串\r\n   */\r\n  getBatchBestLudanByGameIds(ids: string) {\r\n    APIs.getBatchBestLudanByGameIds({lotteryId: ids}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.updateBestLudans(data.bestLudan);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 批量获取历史开奖\r\n   * @param ids 游戏ID列表字符串\r\n   */\r\n  getBatchRecentCodesByGameIds(ids: string) {\r\n    return APIs.getBatchRecentCodesByGameIds({gameid: ids}).then((data: any) => {\r\n      if (data.success > 0) {\r\n        this.updateRecentCodes(data.data);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 更新奖期数据\r\n   * @param datas 奖期 \r\n   * @param curServerTime 当前服务器时间\r\n   */\r\n  updateIssues(datas: any[], curServerTime: number) {\r\n    let issueList = this.state.issueList;\r\n    let found: number = -1;\r\n    datas.forEach((issue: any) => {\r\n      found = issueList.findIndex((item: any) => item.lotteryid === issue.lotteryid);\r\n      if (found !== -1) {\r\n        issueList.splice(found, 1, issue);\r\n      } else {\r\n        issueList.push(issue);\r\n      }\r\n    });\r\n    this.setState({issueList, curServerTime});\r\n  }\r\n  /**\r\n   * 更新最优路单路数\r\n   * @param datas 最优路单路数列表\r\n   */\r\n  updateBestLudans(datas: any[]) {\r\n    let bestLudanList = this.state.bestLudanList;\r\n    let found: number = -1;\r\n    datas.forEach((bestLudan: any) => {\r\n      found = bestLudanList.findIndex((item: any) => item.lotteryId === bestLudan.lotteryId);\r\n      if (found !== -1) {\r\n        bestLudanList.splice(found, 1, bestLudan);\r\n      } else {\r\n        bestLudanList.push(bestLudan);\r\n      }\r\n    });\r\n    this.setState({bestLudanList});\r\n  }\r\n  /**\r\n   * 更新近期开奖数据\r\n   * @param datas 近期开奖数据列表\r\n   */\r\n  updateRecentCodes(datas: any[]) {\r\n    let recentCodeList = this.state.recentCodeList;\r\n    let found: number = -1;\r\n    datas.forEach((recentCode: any) => {\r\n      found = recentCodeList.findIndex((item: any) => item[recentCode.lotteryid] && item[recentCode.lotteryid].length > 0);\r\n      if (found !== -1) {\r\n        recentCodeList.splice(found, 1, recentCode);\r\n      } else {\r\n        recentCodeList.push(recentCode);\r\n      }\r\n    });\r\n    this.setState({recentCodeList});\r\n  }\r\n  loadMore = () => {\r\n    this.loadData();\r\n    curPageNo++;\r\n  }\r\n  /**\r\n   * 获取奖项、最优路单、近期开奖数据\r\n   */\r\n  loadData = () => {\r\n    if (curPageNo > totalPage) return;\r\n    this.setState({isLoading: true});\r\n    const gameIds = this.state.gameIds.slice((curPageNo - 1) * PAGE_SIZE, curPageNo * PAGE_SIZE).join(',');\r\n    const curGames = this.state.curGames.slice(0, curPageNo * PAGE_SIZE);\r\n    this.getIssuesByGameIds(gameIds);\r\n    this.getBatchBestLudanByGameIds(gameIds);\r\n    this.getBatchRecentCodesByGameIds(gameIds).then(() => {\r\n      this.setState({isLoading: false, gamesDataSource: this.state.gamesDataSource.cloneWithRows(curGames)});\r\n    });\r\n  }\r\n  renderItem = (game: Game) => {\r\n    return <LobbyGame key={game.id} gameType={this.state.curGameType} gameId={game.id} gameName={game.name} goto={this.goto} issueList={this.state.issueList} bestLudanList={this.state.bestLudanList} recentCodeList={this.state.recentCodeList} curServerTime={this.state.curServerTime} />\r\n  }\r\n  onEndReached = () => {\r\n    this.loadMore();\r\n  }\r\n  render() {\r\n    return (\r\n      <article className=\"lobby-view\">\r\n        <section className=\"flex lobby-game-ls\">\r\n          {/* {this.state.curGames.map((game: Game) => (\r\n            <LobbyGame key={game.id} gameType={this.state.curGameType} gameId={game.id} gameName={game.name} goto={this.goto} issueList={this.state.issueList} bestLudanList={this.state.bestLudanList} recentCodeList={this.state.recentCodeList} curServerTime={this.state.curServerTime} />\r\n          ))} */}\r\n          {\r\n            <ListView\r\n              ref={el => this.reflv = el}\r\n              dataSource={this.state.gamesDataSource}\r\n              renderFooter={() => (<div style={{ padding: 20, textAlign: 'center' }}>{this.state.isLoading ? '加载中...' : (curPageNo >= totalPage ? '已显示所有' : '上拉加载更多') }</div>)}\r\n              renderRow={this.renderItem}\r\n              pageSize={PAGE_SIZE}\r\n              onEndReached={this.onEndReached}\r\n              onEndReachedThreshold={1600}\r\n            />\r\n          }\r\n        </section>\r\n      </article>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Lobby;\r\n"],"sourceRoot":""}