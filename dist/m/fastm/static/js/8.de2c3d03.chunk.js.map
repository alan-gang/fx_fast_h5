{"version":3,"sources":["views/bet-records/test.tsx"],"names":["page","pageSize","data","dns","key","name","render","x","issue","slice","style","width","Fragment","lotteryName","methodName","code","cls","temp","Number","bonus","toFixed","stat","className","statusCls","statusList","test","props","getOrderList","setState","refreshing","isLoading","orderList","beginDate","Date","_setHMS","_bf","_toAllString","endDate","isfast","then","success","recordList","dataSource","state","cloneWithRows","hasMore","length","onRefresh","onEndReached","event","DataSource","rowHasChanged","y","height","document","documentElement","clientHeight","this","ReactDOM","scrollNode","offsetTop","rd","sid","rid","projectId","map","i","ref","el","renderFooter","renderRow","pullToRefresh","initialListSize","React","Component"],"mappings":"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","file":"m/fastm/static/js/8.de2c3d03.chunk.js","sourcesContent":["import React from 'react'\r\nimport { PullToRefresh, ListView, Button } from 'antd-mobile'\r\nimport * as ReactDOM from 'react-dom'\r\nimport { orderList } from 'src/http/APIs'\r\n// import Colors from 'src/utils/colorConfig'\r\n\r\n// 分页设置\r\nlet page = 1\r\nconst pageSize = 20\r\n// 数据\r\nlet data = []\r\nconst dns = [\r\n  {key: 'issue', name: '期号',\r\n    render: (x) => x.issue.slice(-6) + '期'\r\n  },\r\n  {key: 'methodName', name: '玩法/内容', style: {width: '25%'},\r\n    render: (x: any) => <React.Fragment>{[<div key=\"1\">{x.lotteryName}</div>, <div key=\"2\">{ x.methodName } - { x.code }</div>]}</React.Fragment>\r\n    // render: (x: any) => <div><span className={`inlb txt-c code-bg ${ getStyle(x.code) }`}>{x.code}</span><span className=\"odd text-orange\">{ (x.dyPointDec.split('-')[0] / 100).toFixed(2) }</span></div>\r\n  },\r\n  {key: 'totalPrice', name: '投注金额'},\r\n  {key: 'bonus', name: '中奖金额', cls: 'txt-c',\r\n    render: (x) => {\r\n      let temp = Number(x.bonus).toFixed(2)\r\n      if (x.stat === 0 || !Number(x.bonus)) {\r\n        return '--'\r\n      }\r\n      if (x.bonus > 0) {\r\n        return <span className=\"c-green\">+{ temp }</span>\r\n      }\r\n      return temp\r\n    }\r\n  },\r\n  {key: 'stat', name: '状态', style: {width: '15%'}, cls: 'txt-r',\r\n    render: (x) => <span className={`inlb status-b txt-c ${ statusCls[x.stat] }`}>{ statusList[x.stat] }</span>\r\n  },\r\n]\r\nconst statusCls = ['c-black', 'c-green', 'c-gray', 'c-red', 'c-gray']\r\nconst statusList = ['未开奖', '已中奖', '未中奖', '已撤单', '平局']\r\n// const getStyle = (data: string) => {\r\n//   if (/\\d/.test(data)) return '';\r\n//   let datas = data.split('-');\r\n//   data = datas.length > 1 ? datas[1] : datas[0]\r\n//   return Colors.getStyle(data);\r\n// }\r\n\r\nclass test extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      dataSource: new ListView.DataSource({\r\n        rowHasChanged: (x, y) => x !== y,\r\n      }),\r\n      refreshing: true,\r\n      isLoading: true,\r\n      height: document.documentElement.clientHeight,\r\n      hasMore: true,\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      height: this.state.height - ReactDOM.findDOMNode(this.scrollNode).offsetTop\r\n    })\r\n    this.getOrderList()\r\n  }\r\n  getOrderList = () => {\r\n    this.setState({ refreshing: true, isLoading: true })\r\n    orderList({\r\n      beginDate: (new Date())._setHMS('0:0:0')._bf(-6)._toAllString(),\r\n      endDate: (new Date())._setHMS('23:59:59')._toAllString(),\r\n      page: page,\r\n      pageSize: pageSize,\r\n      isfast: 1\r\n    }).then(({success, recordList}) => {\r\n      if (success === 1) {\r\n        data = [...data, ...recordList]\r\n        page++\r\n        this.setState({\r\n          dataSource: this.state.dataSource.cloneWithRows(data),\r\n          refreshing: false,\r\n          isLoading: false,\r\n          hasMore: recordList.length >= pageSize,\r\n        })\r\n      }\r\n    })\r\n  }\r\n  onRefresh = () => {\r\n    page = 0\r\n    data = []\r\n    this.getOrderList()\r\n  }\r\n  onEndReached = (event) => {\r\n    if (this.state.isLoading && !this.state.hasMore) {\r\n      return\r\n    }\r\n    this.getOrderList()\r\n  }\r\n  renderRow (rd: any, sid: any, rid: any) {\r\n    return (\r\n      <div key={rd.projectId} className=\"pdt-40 pdb-20 pdl-10 pdr-10 b-1px-t\">\r\n        { dns.map((x, i) => \r\n          <span key={i} className={`inlb pdl-10 pdr-10 va-t ${x.cls || ''}`} style={x.style || {width: '20%'}}>\r\n            { \r\n              x.render ? x.render(rd) : rd[x.key]\r\n            }\r\n          </span>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"bet-record\">\r\n        <div className=\"bet-record-header pdl-10 pdr-10 fs-24 c-102 hlh-90 bgc-white b-1px-b\">\r\n          { dns.map((x, i) => <span key={i} className={`inlb pdl-10 pdr-10 va-t ${x.cls || ''}`} style={x.style || {width: '20%'}}> {x.name} </span>) }\r\n        </div>\r\n        <ListView\r\n          className=\"fs-24 c-3 fw-b\"\r\n          key={'1'}\r\n          ref={el => this.scrollNode = el}\r\n          dataSource={this.state.dataSource}\r\n          renderFooter={() => (<div className=\"pd-30 txt-c\">\r\n            {this.state.isLoading ? '加载中...' : '加载完毕'}\r\n          </div>)}\r\n          renderRow={this.renderRow}\r\n          style={{height: this.state.height}}\r\n          pullToRefresh={<PullToRefresh\r\n            refreshing={this.state.refreshing}\r\n            onRefresh={this.onRefresh}\r\n          />}\r\n          initialListSize={15}\r\n          onEndReached={this.onEndReached}\r\n          pageSize={pageSize}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default test"],"sourceRoot":""}